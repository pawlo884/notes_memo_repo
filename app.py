from typing import Any
import streamlit as st
from streamlit.errors import StreamlitSecretNotFoundError
from audiorecorder import audiorecorder  # type: ignore
from io import BytesIO
from dotenv import dotenv_values
from openai import OpenAI
from hashlib import md5
from qdrant_client import QdrantClient
from qdrant_client.models import Distance, VectorParams, PointStruct, Filter, FieldCondition, MatchValue, Range
from datetime import datetime
import tempfile
import os
import boto3
from botocore.client import Config
import uuid
import psycopg2
from psycopg2.extras import RealDictCursor
import json
import yt_dlp
import re
import traceback
import sys
import pickle
import hashlib
import time
import pytesseract
from PIL import Image

# Konfiguracja ≈õcie≈ºki do Tesseract OCR
import platform

# R√≥≈ºne ≈õcie≈ºki dla r√≥≈ºnych ≈õrodowisk
if platform.system() == "Windows":
    # Windows - lokalna instalacja
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
elif platform.system() == "Linux":
    # Linux (Streamlit Cloud) - u≈ºywa systemowego tesseract
    pytesseract.pytesseract.tesseract_cmd = 'tesseract'
else:
    # macOS lub inne
    pytesseract.pytesseract.tesseract_cmd = 'tesseract'

# zmienne globalne

env = dotenv_values(".env")

# ≈öcie≈ºka do pliku z trwa≈Çymi sesjami
SESSION_FILE = ".streamlit_session.pkl"


def log_error(error, context=""):
    """Loguje b≈ÇƒÖd z kontekstem i pe≈Çnym traceback"""
    error_msg = f"üö® B≈ÅƒÑD: {str(error)}"
    if context:
        error_msg = f"üö® B≈ÅƒÑD w {context}: {str(error)}"

    # Wy≈õwietl w Streamlit
    st.error(error_msg)

    # Poka≈º szczeg√≥≈Çy w expanderze
    with st.expander("üîç Szczeg√≥≈Çy b≈Çƒôdu (kliknij aby rozwinƒÖƒá)"):
        st.code(traceback.format_exc(), language="python")

        # Dodatkowe informacje
        st.write("**Typ b≈Çƒôdu:**", type(error).__name__)
        st.write("**Plik:**", sys.exc_info()[2].tb_frame.f_code.co_filename)
        st.write("**Linia:**", sys.exc_info()[2].tb_lineno)

    # Zapisz do log√≥w (w trybie deweloperskim)
    if st.session_state.get("debug_mode", False):
        print(f"DEBUG ERROR: {error_msg}")
        print(traceback.format_exc())


def show_error_toast(error_msg):
    """Pokazuje b≈ÇƒÖd jako toast (szybko znika)"""
    st.toast(f"‚ö†Ô∏è {error_msg}", icon="‚ö†Ô∏è")


def save_persistent_session(username, remember_me=True):
    """Zapisuje trwa≈ÇƒÖ sesjƒô do pliku"""
    try:
        session_data = {
            "username": username,
            "login_time": time.time(),
            "remember_me": remember_me,
            "session_id": hashlib.md5(f"{username}{time.time()}".encode()).hexdigest()[:16]
        }

        with open(SESSION_FILE, 'wb') as f:
            pickle.dump(session_data, f)
        return True
    except Exception as e:
        log_error(e, "zapisywanie trwa≈Çej sesji")
        return False


def load_persistent_session():
    """≈Åaduje trwa≈ÇƒÖ sesjƒô z pliku"""
    try:
        if not os.path.exists(SESSION_FILE):
            return None

        with open(SESSION_FILE, 'rb') as f:
            session_data = pickle.load(f)

        # Sprawd≈∫ czy sesja nie wygas≈Ça (30 dni)
        current_time = time.time()
        session_duration = 30 * 24 * 60 * 60  # 30 dni w sekundach

        if current_time - session_data.get("login_time", 0) < session_duration:
            return session_data
        else:
            # Sesja wygas≈Ça, usu≈Ñ plik
            delete_persistent_session()
            return None

    except Exception as e:
        log_error(e, "≈Çadowanie trwa≈Çej sesji")
        return None


def delete_persistent_session():
    """Usuwa plik z trwa≈ÇƒÖ sesjƒÖ"""
    try:
        if os.path.exists(SESSION_FILE):
            os.remove(SESSION_FILE)
        return True
    except Exception as e:
        log_error(e, "usuwanie trwa≈Çej sesji")
        return False


try:
    if "OPENAI_API_KEY" in st.secrets:
        env["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]
    if "QDRANT_URL" in st.secrets:
        env["QDRANT_URL"] = st.secrets["QDRANT_URL"]
    if "QDRANT_API_KEY" in st.secrets:
        env["QDRANT_API_KEY"] = st.secrets["QDRANT_API_KEY"]
    if "DO_SPACES_KEY" in st.secrets:
        env["DO_SPACES_KEY"] = st.secrets["DO_SPACES_KEY"]
    if "DO_SPACES_SECRET" in st.secrets:
        env["DO_SPACES_SECRET"] = st.secrets["DO_SPACES_SECRET"]
    if "DO_SPACES_REGION" in st.secrets:
        env["DO_SPACES_REGION"] = st.secrets["DO_SPACES_REGION"]
    if "DO_SPACES_BUCKET" in st.secrets:
        env["DO_SPACES_BUCKET"] = st.secrets["DO_SPACES_BUCKET"]
    if "APP_USERNAME" in st.secrets:
        env["APP_USERNAME"] = st.secrets["APP_USERNAME"]
    if "APP_PASSWORD" in st.secrets:
        env["APP_PASSWORD"] = st.secrets["APP_PASSWORD"]
    if "POSTGRES_HOST" in st.secrets:
        env["POSTGRES_HOST"] = st.secrets["POSTGRES_HOST"]
    if "POSTGRES_PORT" in st.secrets:
        env["POSTGRES_PORT"] = st.secrets["POSTGRES_PORT"]
    if "POSTGRES_DB" in st.secrets:
        env["POSTGRES_DB"] = st.secrets["POSTGRES_DB"]
    if "POSTGRES_USER" in st.secrets:
        env["POSTGRES_USER"] = st.secrets["POSTGRES_USER"]
    if "POSTGRES_PASSWORD" in st.secrets:
        env["POSTGRES_PASSWORD"] = st.secrets["POSTGRES_PASSWORD"]
    if "POSTGRES_SSLMODE" in st.secrets:
        env["POSTGRES_SSLMODE"] = st.secrets["POSTGRES_SSLMODE"]
    if "INSTAGRAM_USERNAME" in st.secrets:
        env["INSTAGRAM_USERNAME"] = st.secrets["INSTAGRAM_USERNAME"]
    if "INSTAGRAM_PASSWORD" in st.secrets:
        env["INSTAGRAM_PASSWORD"] = st.secrets["INSTAGRAM_PASSWORD"]
except StreamlitSecretNotFoundError:
    # secrets.toml nie istnieje, u≈ºywamy tylko .env
    pass

AUDIO_TRANSCRIPTION_MODEL = "whisper-1"

EMBEDDING_MODEL = "text-embedding-3-large"

EMBEDDING_DIM = 1536

QDRANT_COLLECTION_NAME = "app_note_v1"

title = "Audio & Video Notes"

# koniec zmiennych globalnych

st.set_page_config(page_title=title,
                   page_icon=":microphone:", layout="centered")

st.title(title)

# Tryb debugowania (w prawym g√≥rnym rogu)
col1, col2 = st.columns([4, 1])
with col1:
    pass
with col2:
    debug_mode = st.checkbox(
        "üêõ Debug", help="W≈ÇƒÖcza szczeg√≥≈Çowe logowanie b≈Çƒôd√≥w")
    if debug_mode:
        st.session_state["debug_mode"] = True
    else:
        st.session_state["debug_mode"] = False

add_tab, search_tab, browse_tab, manage_categories_tab, settings_tab = st.tabs(
    ["Dodaj notatkƒô", "Szukaj notatki", "PrzeglƒÖdaj notatki", "ZarzƒÖdzaj kategoriami", "‚öôÔ∏è Ustawienia"])

# openai_client = get_openai_client()


def get_settings():
    """Pobiera aktualne ustawienia z session state"""
    if "settings" not in st.session_state:
        st.session_state["settings"] = {
            "openai_api_key": env.get("OPENAI_API_KEY", ""),
            "qdrant_url": env.get("QDRANT_URL", ""),
            "qdrant_api_key": env.get("QDRANT_API_KEY", ""),
            "postgres_host": env.get("POSTGRES_HOST", ""),
            "postgres_port": env.get("POSTGRES_PORT", "5432"),
            "postgres_db": env.get("POSTGRES_DB", ""),
            "postgres_user": env.get("POSTGRES_USER", ""),
            "postgres_password": env.get("POSTGRES_PASSWORD", ""),
            "postgres_sslmode": env.get("POSTGRES_SSLMODE", "require"),
            "do_spaces_key": env.get("DO_SPACES_KEY", ""),
            "do_spaces_secret": env.get("DO_SPACES_SECRET", ""),
            "do_spaces_region": env.get("DO_SPACES_REGION", ""),
            "do_spaces_bucket": env.get("DO_SPACES_BUCKET", ""),
            "instagram_username": env.get("INSTAGRAM_USERNAME", ""),
            "instagram_password": env.get("INSTAGRAM_PASSWORD", ""),
        }
    return st.session_state["settings"]


def save_settings(new_settings):
    """Zapisuje nowe ustawienia do session state i aktualizuje env"""
    st.session_state["settings"] = new_settings

    # Aktualizuj globalne env
    for key, value in new_settings.items():
        env_key = key.upper()
        env[env_key] = value

    st.success("‚úÖ Ustawienia zapisane!")


def test_openai_connection(api_key):
    """Testuje po≈ÇƒÖczenie z OpenAI"""
    try:
        from openai import OpenAI
        client = OpenAI(api_key=api_key)
        # Test prostego zapytania
        client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "test"}],
            max_tokens=1
        )
        return True, "Po≈ÇƒÖczenie OK"
    except Exception as e:
        return False, f"B≈ÇƒÖd: {str(e)}"


def test_qdrant_connection(url, api_key):
    """Testuje po≈ÇƒÖczenie z Qdrant"""
    try:
        from qdrant_client import QdrantClient
        client = QdrantClient(url=url, api_key=api_key)
        collections = client.get_collections()
        return True, f"Po≈ÇƒÖczenie OK - {len(collections.collections)} kolekcji"
    except Exception as e:
        return False, f"B≈ÇƒÖd: {str(e)}"


def test_postgres_connection(host, port, db, user, password, sslmode):
    """Testuje po≈ÇƒÖczenie z PostgreSQL"""
    try:
        import psycopg2
        conn_string = f"host={host} port={port} dbname={db} user={user} password={password} sslmode={sslmode}"
        conn = psycopg2.connect(conn_string)
        conn.close()
        return True, "Po≈ÇƒÖczenie OK"
    except Exception as e:
        return False, f"B≈ÇƒÖd: {str(e)}"


def get_openai_client():
    # U≈ºyj ustawie≈Ñ z panelu u≈ºytkownika, je≈õli dostƒôpne
    settings = get_settings()
    api_key = settings.get("openai_api_key") or env.get("OPENAI_API_KEY")
    return OpenAI(api_key=api_key)


@st.cache_resource
def get_spaces_client():
    """Tworzy klienta boto3 dla DigitalOcean Spaces"""
    # U≈ºyj ustawie≈Ñ z panelu u≈ºytkownika, je≈õli dostƒôpne
    settings = get_settings()

    spaces_key = settings.get("do_spaces_key") or env.get("DO_SPACES_KEY")
    spaces_secret = settings.get(
        "do_spaces_secret") or env.get("DO_SPACES_SECRET")
    spaces_region = settings.get(
        "do_spaces_region") or env.get("DO_SPACES_REGION")
    spaces_bucket = settings.get(
        "do_spaces_bucket") or env.get("DO_SPACES_BUCKET")

    # Sprawd≈∫ czy wszystkie klucze sƒÖ dostƒôpne i nie sƒÖ puste
    if not all([spaces_key, spaces_secret, spaces_region, spaces_bucket]):
        return None

    try:
        session = boto3.session.Session()
        client = session.client(
            's3',
            region_name=spaces_region,
            endpoint_url=f'https://{spaces_region}.digitaloceanspaces.com',
            aws_access_key_id=spaces_key,
            aws_secret_access_key=spaces_secret,
            config=Config(signature_version='s3v4')
        )
        return client
    except Exception as e:
        st.warning(f"‚ö†Ô∏è DigitalOcean Spaces niedostƒôpne: {str(e)}")
        return None


def upload_file_to_spaces(file_bytes, file_extension, content_type):
    """Uploaduje plik do DigitalOcean Spaces i zwraca URL"""
    spaces_client = get_spaces_client()

    # U≈ºyj ustawie≈Ñ z panelu u≈ºytkownika, je≈õli dostƒôpne
    settings = get_settings()
    spaces_bucket = settings.get(
        "do_spaces_bucket") or env.get("DO_SPACES_BUCKET")
    spaces_region = settings.get(
        "do_spaces_region") or env.get("DO_SPACES_REGION")

    if not spaces_client or not spaces_bucket or not spaces_region:
        return None

    # Generuj unikalnƒÖ nazwƒô pliku
    file_id = str(uuid.uuid4())
    filename = f"app_note_v1/{file_id}.{file_extension}"

    try:
        # Upload do Spaces
        spaces_client.put_object(
            Bucket=spaces_bucket,
            Key=filename,
            Body=file_bytes,
            ACL='public-read',
            ContentType=content_type,
            Metadata={
                'uploaded-from': 'audio-video-notes-app'
            }
        )

        # Zwr√≥ƒá publiczny URL
        url = f'https://{spaces_bucket}.{spaces_region}.digitaloceanspaces.com/{filename}'
        return url
    except Exception as e:
        log_error(e, "upload do Spaces")
        return None


def get_file_from_spaces_url(url):
    """Pobiera plik z Spaces po URL (je≈õli potrzebne do odtwarzania)"""
    spaces_client = get_spaces_client()

    if not spaces_client or not url:
        return None

    try:
        # WyciƒÖgnij nazwƒô pliku z URL
        filename = url.split('.digitaloceanspaces.com/')[-1]

        response = spaces_client.get_object(
            Bucket=env["DO_SPACES_BUCKET"],
            Key=filename
        )
        return response['Body'].read()
    except Exception as e:
        log_error(e, "pobieranie z Spaces")
        return None


def delete_file_from_spaces(url: str) -> bool:
    """Usuwa plik w Spaces na podstawie pe≈Çnego URL. Zwraca True, je≈õli sukces."""
    spaces_client = get_spaces_client()

    if not spaces_client or not url:
        return False

    try:
        # Key to czƒô≈õƒá ≈õcie≈ºki po domenie *.digitaloceanspaces.com/
        key = url.split('.digitaloceanspaces.com/')[-1]

        spaces_client.delete_object(
            Bucket=env["DO_SPACES_BUCKET"],
            Key=key
        )
        return True
    except Exception as e:
        log_error(e, "usuwanie pliku ze Spaces")
        return False


def transcribe_audio(audio_bytes, include_timestamps=False):
    """
    Transkrybuje audio, opcjonalnie zwracajƒÖc timestampy

    Returns:
        - Je≈õli include_timestamps=False: str (tylko tekst)
        - Je≈õli include_timestamps=True: dict z 'text' i 'segments'
    """
    openai_client = get_openai_client()
    audio_file = BytesIO(audio_bytes)
    audio_file.name = "audio.mp3"
    transcript = openai_client.audio.transcriptions.create(
        file=audio_file,
        model=AUDIO_TRANSCRIPTION_MODEL,
        response_format="verbose_json",
        timestamp_granularities=["segment"]  # Timestampy dla segment√≥w
    )

    if include_timestamps:
        # Zwr√≥ƒá pe≈ÇnƒÖ transkrypcjƒô z timestampami
        return {
            "text": transcript.text,
            "segments": [
                {
                    "start": getattr(seg, "start", 0),
                    "end": getattr(seg, "end", 0),
                    "text": getattr(seg, "text", "")
                }
                for seg in (transcript.segments or [])
            ]
        }

    # Zwr√≥ƒá tylko tekst (backward compatibility)
    return transcript.text


def extract_audio_from_video(video_bytes):
    """Ekstraktuje audio z pliku wideo"""
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_video:
        temp_video.write(video_bytes)
        temp_video_path = temp_video.name

    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as temp_audio:
        temp_audio_path = temp_audio.name

    try:
        # Wczytaj wideo i wyeksportuj audio
        from moviepy.editor import VideoFileClip
        video = VideoFileClip(temp_video_path)
        video.audio.write_audiofile(temp_audio_path, logger=None)
        video.close()

        # Wczytaj audio jako bytes
        with open(temp_audio_path, "rb") as f:
            audio_bytes = f.read()

        return audio_bytes
    finally:
        # Usu≈Ñ tymczasowe pliki
        if os.path.exists(temp_video_path):
            os.unlink(temp_video_path)
        if os.path.exists(temp_audio_path):
            os.unlink(temp_audio_path)


def download_instagram_video(url):
    """
    Pobiera wideo z Instagram (Reels, posty, IGTV)

    Returns:
        dict: {
            'video_bytes': bytes,
            'title': str,
            'author': str,
            'description': str,
            'url': str
        }
    """

    # Pobierz ustawienia Instagram z session state
    settings = get_settings()
    instagram_username = settings.get("instagram_username", "")
    instagram_password = settings.get("instagram_password", "")

    # Konfiguracja yt-dlp z lepszymi opcjami dla Instagram
    ydl_opts = {
        'format': 'best',
        'quiet': True,
        'no_warnings': True,
        'extract_flat': False,
        'outtmpl': '%(id)s.%(ext)s',
        'sleep_requests': 1,  # Op√≥≈∫nienie miƒôdzy requestami
        'sleep_interval': 1,  # Op√≥≈∫nienie miƒôdzy pobraniami
    }

    # Funkcja pomocnicza do pobierania
    def attempt_download(opts):
        with tempfile.TemporaryDirectory() as temp_dir:
            opts['outtmpl'] = os.path.join(temp_dir, '%(id)s.%(ext)s')

            with yt_dlp.YoutubeDL(opts) as ydl:
                info = ydl.extract_info(url, download=True)

                # Znajd≈∫ pobrany plik
                video_file = None
                for file in os.listdir(temp_dir):
                    if file.startswith(info.get('id', '')):
                        video_file = os.path.join(temp_dir, file)
                        break

                if not video_file or not os.path.exists(video_file):
                    raise Exception("Nie uda≈Ço siƒô pobraƒá wideo")

                # Wczytaj wideo jako bytes
                with open(video_file, 'rb') as f:
                    video_bytes = f.read()

                # WyciƒÖgnij metadane
                return {
                    'video_bytes': video_bytes,
                    'title': info.get('title', 'Instagram Video'),
                    'author': info.get('uploader', 'Nieznany'),
                    'description': info.get('description', ''),
                    'url': url,
                    'duration': info.get('duration', 0),
                    'timestamp': info.get('timestamp', None)
                }

    # Spr√≥buj r√≥≈ºne metody pobierania w kolejno≈õci
    attempts = [
        # Pr√≥ba 1: Bez cookies (najbardziej niezawodna)
        ydl_opts,
        # Pr√≥ba 2: Tylko Chrome (wiƒôcej prawdopodobne w ≈õrodowisku cloud)
        {**ydl_opts, 'cookiesfrombrowser': ('chrome',)},
        # Pr√≥ba 3: Tylko Firefox
        {**ydl_opts, 'cookiesfrombrowser': ('firefox',)},
        # Pr√≥ba 4: Chrome + Firefox razem
        {**ydl_opts, 'cookiesfrombrowser': ('chrome', 'firefox')},
        # Pr√≥ba 5: Tylko Opera (mo≈ºe nie dzia≈Çaƒá w cloud)
        {**ydl_opts, 'cookiesfrombrowser': ('opera',)},
        # Pr√≥ba 6: Opera z dodatkowymi opcjami
        {**ydl_opts, 'cookiesfrombrowser': ('opera',), 'extractor_args': {
            'instagram': {'webpage_url_basename': True}}},
        # Pr√≥ba 7: Wszystkie przeglƒÖdarki razem (ostatnia opcja)
        {**ydl_opts, 'cookiesfrombrowser': ('chrome', 'firefox', 'opera')}
    ]

    # Dodaj pr√≥by z logowaniem je≈õli dane sƒÖ dostƒôpne
    if instagram_username and instagram_password:
        # Pr√≥by z logowaniem (na ko≈Ñcu, po cookies)
        login_opts = {
            **ydl_opts,
            'username': instagram_username,
            'password': instagram_password,
        }
        attempts.extend([
            # Pr√≥ba z logowaniem bez cookies
            login_opts,
            # Pr√≥ba z logowaniem + cookies Chrome (najpierw Chrome)
            {**login_opts, 'cookiesfrombrowser': ('chrome',)},
            # Pr√≥ba z logowaniem + cookies Firefox
            {**login_opts, 'cookiesfrombrowser': ('firefox',)},
            # Pr√≥ba z logowaniem + cookies Chrome + Firefox
            {**login_opts, 'cookiesfrombrowser': ('chrome', 'firefox')},
            # Pr√≥ba z logowaniem + cookies Opera (na ko≈Ñcu)
            {**login_opts, 'cookiesfrombrowser': ('opera',)},
        ])

    last_error = None
    cookie_attempts_failed = 0

    for opts in attempts:
        try:
            return attempt_download(opts)
        except Exception as e:
            last_error = str(e)

            # Je≈õli to problem z cookies lub autentykacjƒÖ, spr√≥buj nastƒôpnej metody
            cookie_errors = [
                "could not find chrome cookies database",
                "could not find opera cookies database",
                "could not find firefox cookies database",
                "cookiesfrombrowser",
                "unsupported keyring",
                "firefox cookies database",
                "opera cookies database",
                "/home/appuser/.config/opera",
                "/.config/opera",
                "opera cookies",
                "chrome cookies",
                "firefox cookies",
                "cookies database",
                "login required",
                "rate-limit reached",
                "not available"
            ]

            # Sprawd≈∫ czy to b≈ÇƒÖd zwiƒÖzany z cookies/autentykacjƒÖ
            if any(error in last_error.lower() for error in cookie_errors):
                cookie_attempts_failed += 1
                # Nie ko≈Ñcz na ostatniej pr√≥bie
                if cookie_attempts_failed < len(attempts) - 1:
                    continue

            # Je≈õli to inne b≈Çƒôdy, nie pr√≥buj dalej
            break

    # Je≈õli wszystkie pr√≥by siƒô nie powiod≈Çy
    if "rate-limit reached" in last_error or "login required" in last_error or "not available" in last_error:
        # Sprawd≈∫ ile pr√≥b zosta≈Ço wykonanych
        attempts_info = ""
        methods_tried = ["bez cookies", "z cookies Opery/Chrome/Firefox"]

        if instagram_username and instagram_password:
            methods_tried.append("z logowaniem")

        if cookie_attempts_failed > 0:
            attempts_info = f"\n\nüîß Aplikacja wypr√≥bowa≈Ça {len(attempts)} r√≥≈ºnych metod pobierania ({', '.join(methods_tried)}), ale Instagram nadal wymaga autentykacji."

        suggestions = [
            "1. Link jest prawid≈Çowy i publiczny",
            "2. Profil nie jest prywatny",
            "3. Spr√≥buj ponownie za kilka minut (rate limit)"
        ]

        if instagram_username and instagram_password:
            suggestions.append(
                "4. Sprawd≈∫ czy dane logowania do Instagrama sƒÖ prawid≈Çowe w ustawieniach")
            suggestions.append(
                "5. Upewnij siƒô, ≈ºe konto nie wymaga weryfikacji dwuetapowej")
        else:
            suggestions.append(
                "4. Skonfiguruj dane logowania do Instagrama w panelu ustawie≈Ñ")
            suggestions.append(
                "5. Upewnij siƒô, ≈ºe masz aktywne konto na Instagram i jeste≈õ zalogowany w przeglƒÖdarce Opera")

        raise Exception(
            "Instagram wymaga autentykacji.\n" + "\n".join(suggestions) +
            f"{attempts_info}\n\n"
            f"Szczeg√≥≈Çy b≈Çƒôdu: {last_error}"
        )
    else:
        raise Exception(f"B≈ÇƒÖd pobierania z Instagram: {last_error}")


def is_instagram_url(url):
    """Sprawdza czy URL jest z Instagram"""
    instagram_patterns = [
        r'instagram\.com/p/',        # Posty
        r'instagram\.com/reel/',     # Reels
        r'instagram\.com/tv/',       # IGTV
        r'instagram\.com/stories/',  # Stories (mo≈ºe nie dzia≈Çaƒá)
    ]

    return any(re.search(pattern, url) for pattern in instagram_patterns)


def extract_text_from_image(image_bytes):
    """
    Ekstraktuje tekst z obrazka u≈ºywajƒÖc OCR (Tesseract)

    Args:
        image_bytes: bytes - dane obrazka

    Returns:
        str - wyekstraktowany tekst
    """
    try:
        # Otw√≥rz obrazek z bytes
        image = Image.open(BytesIO(image_bytes))

        # Konwertuj na RGB je≈õli potrzeba
        if image.mode != 'RGB':
            image = image.convert('RGB')

        # U≈ºyj Tesseract do OCR
        # Ustaw jƒôzyk na polski + angielski (fallback do angielskiego je≈õli polski nie dostƒôpny)
        try:
            text = pytesseract.image_to_string(image, lang='pol+eng')
        except Exception:
            # Fallback do angielskiego je≈õli polski nie jest dostƒôpny
            text = pytesseract.image_to_string(image, lang='eng')

        return text.strip()
    except pytesseract.pytesseract.TesseractNotFoundError:
        raise Exception(
            "Tesseract OCR nie jest zainstalowany. Na Streamlit Cloud dodaj 'tesseract-ocr' do packages.txt")
    except Exception as e:
        raise Exception(f"B≈ÇƒÖd podczas ekstrakcji tekstu z obrazka: {str(e)}")


def process_multiple_images(image_files):
    """
    Przetwarza wiele obrazk√≥w jednocze≈õnie

    Args:
        image_files: lista plik√≥w obrazk√≥w z Streamlit

    Returns:
        dict: {
            'combined_text': str - po≈ÇƒÖczony tekst ze wszystkich obrazk√≥w,
            'individual_texts': list - lista tekst√≥w z ka≈ºdego obrazka,
            'image_data': list - lista danych obrazk√≥w (bytes, nazwa, typ)
        }
    """
    combined_text = ""
    individual_texts = []
    image_data = []

    for i, uploaded_file in enumerate(image_files):
        try:
            # Wczytaj dane obrazka
            image_bytes = uploaded_file.read()
            file_ext = uploaded_file.name.split('.')[-1].lower()
            content_type = f"image/{file_ext}"

            # Zapisz dane obrazka
            image_data.append({
                'bytes': image_bytes,
                'name': uploaded_file.name,
                'extension': file_ext,
                'content_type': content_type
            })

            # Ekstraktuj tekst
            with st.spinner(f"Przetwarzam obrazek {i+1}/{len(image_files)}: {uploaded_file.name}"):
                text = extract_text_from_image(image_bytes)
                individual_texts.append({
                    'filename': uploaded_file.name,
                    'text': text
                })

                # Dodaj do po≈ÇƒÖczonego tekstu
                if text:
                    combined_text += f"\n\n--- Obrazek {i+1}: {uploaded_file.name} ---\n{text}"
                else:
                    combined_text += f"\n\n--- Obrazek {i+1}: {uploaded_file.name} ---\n[Brak tekstu do odczytania]"

        except Exception as e:
            st.error(
                f"B≈ÇƒÖd przetwarzania obrazka {uploaded_file.name}: {str(e)}")
            individual_texts.append({
                'filename': uploaded_file.name,
                'text': f"[B≈ÅƒÑD: {str(e)}]"
            })
            combined_text += f"\n\n--- Obrazek {i+1}: {uploaded_file.name} ---\n[B≈ÅƒÑD: {str(e)}]"

    return {
        'combined_text': combined_text.strip(),
        'individual_texts': individual_texts,
        'image_data': image_data
    }


@st.cache_resource
def get_qdrant_client():
    # U≈ºyj ustawie≈Ñ z panelu u≈ºytkownika, je≈õli dostƒôpne
    settings = get_settings()
    url = settings.get("qdrant_url") or env.get("QDRANT_URL")
    api_key = settings.get("qdrant_api_key") or env.get("QDRANT_API_KEY")
    return QdrantClient(
        url=url,
        api_key=api_key,
    )


def assure_db_collection_exists():
    qdrant_client = get_qdrant_client()
    if not qdrant_client.collection_exists(QDRANT_COLLECTION_NAME):
        print("Tworzƒô kolekcjƒô")
        qdrant_client.create_collection(
            collection_name=QDRANT_COLLECTION_NAME,
            vectors_config=VectorParams(
                size=EMBEDDING_DIM,
                distance=Distance.COSINE,
            ),
        )
    else:
        print("Kolekcja ju≈º istnieje")


# PostgreSQL connection
def get_postgres_connection():
    """Tworzy po≈ÇƒÖczenie z PostgreSQL"""
    # U≈ºyj ustawie≈Ñ z panelu u≈ºytkownika, je≈õli dostƒôpne
    settings = get_settings()

    # Sprawd≈∫ czy wszystkie wymagane dane sƒÖ dostƒôpne
    host = settings.get("postgres_host") or env.get("POSTGRES_HOST")
    db = settings.get("postgres_db") or env.get("POSTGRES_DB")
    user = settings.get("postgres_user") or env.get("POSTGRES_USER")
    password = settings.get(
        "postgres_password") or env.get("POSTGRES_PASSWORD")

    if not all([host, db, user, password]):
        return None

    try:
        conn = psycopg2.connect(
            host=host,
            port=settings.get("postgres_port") or env.get(
                "POSTGRES_PORT", "5432"),
            database=db,
            user=user,
            password=password,
            sslmode=settings.get("postgres_sslmode") or env.get(
                "POSTGRES_SSLMODE", "require")
        )
        return conn
    except Exception as e:
        st.error(f"B≈ÇƒÖd po≈ÇƒÖczenia z PostgreSQL: {str(e)}")
        return None


def init_postgres_tables():
    """Inicjalizuje tabele w PostgreSQL je≈õli nie istniejƒÖ"""
    conn = get_postgres_connection()
    if not conn:
        return False

    try:
        with conn.cursor() as cur:
            # Odczytaj i wykonaj skrypt init_db.sql
            with open("init_db.sql", "r", encoding="utf-8") as f:
                sql = f.read()
                cur.execute(sql)

            # Aktualizuj constraint je≈õli istnieje (dodaj 'instagram' i 'image')
            try:
                cur.execute("""
                    ALTER TABLE notes DROP CONSTRAINT IF EXISTS notes_source_type_check;
                    ALTER TABLE notes ADD CONSTRAINT notes_source_type_check 
                    CHECK (source_type IN ('audio', 'video', 'text', 'instagram', 'image'));
                """)
            except Exception:
                # Ignoruj b≈ÇƒÖd je≈õli constraint nie istnieje
                pass

            # Dodaj kolumnƒô multiple_images_data je≈õli nie istnieje
            try:
                cur.execute("""
                    ALTER TABLE notes ADD COLUMN IF NOT EXISTS multiple_images_data JSONB;
                """)
            except Exception:
                # Ignoruj b≈ÇƒÖd je≈õli kolumna ju≈º istnieje
                pass

        conn.commit()
        return True
    except Exception as e:
        log_error(e, "inicjalizacja tabel PostgreSQL")
        conn.rollback()
        return False
    finally:
        conn.close()


def get_embedding(text):
    openai_client = get_openai_client()
    result = openai_client.embeddings.create(
        input=[text],
        model=EMBEDDING_MODEL,
        dimensions=EMBEDDING_DIM,
    )
    return result.data[0].embedding


def generate_search_context(query, note_text, max_length=300):
    """
    Generuje kontekst/streszczenie pokazujƒÖce dlaczego notatka pasuje do zapytania
    """
    openai_client = get_openai_client()

    try:
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": "Jeste≈õ asystentem, kt√≥ry pomaga znale≈∫ƒá relevantne fragmenty tekstu. Wypisz 1-2 zdania pokazujƒÖce, kt√≥re fragmenty notatki pasujƒÖ do zapytania u≈ºytkownika. Cytuj konkretne fragmenty."
                },
                {
                    "role": "user",
                    "content": f"Zapytanie u≈ºytkownika: '{query}'\n\nNotatka:\n{note_text[:1000]}\n\nWyja≈õnij kr√≥tko (max 2 zdania), dlaczego ta notatka pasuje do zapytania, cytujƒÖc konkretny fragment."
                }
            ],
            max_tokens=150,
            temperature=0.3
        )

        return response.choices[0].message.content.strip()
    except Exception as e:
        # Fallback - poka≈º fragment tekstu zawierajƒÖcy s≈Çowa z zapytania
        query_words = query.lower().split()
        note_lower = note_text.lower()

        # Znajd≈∫ pierwsze wystƒÖpienie kt√≥rego≈õ ze s≈Ç√≥w
        for word in query_words:
            if word in note_lower:
                idx = note_lower.index(word)
                start = max(0, idx - 100)
                end = min(len(note_text), idx + 200)
                fragment = note_text[start:end].strip()
                if start > 0:
                    fragment = "..." + fragment
                if end < len(note_text):
                    fragment = fragment + "..."
                return f"Fragment: {fragment}"

        # Je≈õli nie znaleziono, zwr√≥ƒá poczƒÖtek notatki
        return note_text[:max_length] + ("..." if len(note_text) > max_length else "")


def normalize_polish_text(text):
    """
    Normalizuje polski tekst usuwajƒÖc znaki diakrytyczne
    """
    # U≈ºywamy rƒôcznego mapowania zamiast unidecode (kt√≥ry ≈∫le obs≈Çuguje polskie znaki)
    polish_map = {
        'ƒÖ': 'a', 'ƒá': 'c', 'ƒô': 'e', '≈Ç': 'l', '≈Ñ': 'n',
        '√≥': 'o', '≈õ': 's', '≈∫': 'z', '≈º': 'z',
        'ƒÑ': 'A', 'ƒÜ': 'C', 'ƒò': 'E', '≈Å': 'L', '≈É': 'N',
        '√ì': 'O', '≈ö': 'S', '≈π': 'Z', '≈ª': 'Z'
    }

    normalized = text.lower()
    for polish, basic in polish_map.items():
        normalized = normalized.replace(polish, basic)

    return normalized


def highlight_text(text, query):
    """
    Pod≈õwietla s≈Çowa z zapytania w tek≈õcie u≈ºywajƒÖc embeddings do por√≥wnania podobie≈Ñstwa
    """
    if not query:
        return text

    import re
    import numpy as np

    try:
        # Pobierz klienta OpenAI
        openai_client = get_openai_client()

        # Podziel zapytanie na s≈Çowa
        query_words = query.lower().split()
        highlighted_text = text

        # Znajd≈∫ wszystkie s≈Çowa w tek≈õcie
        words_in_text = re.findall(r'\b\w+\b', text)

        # Generuj embeddings dla s≈Ç√≥w z zapytania (tylko raz)
        query_word_embeddings = {}
        for word in query_words:
            if len(word) < 3:  # Ignoruj bardzo kr√≥tkie s≈Çowa
                continue

            try:
                response = openai_client.embeddings.create(
                    input=word,
                    model="text-embedding-3-small"
                )
                query_word_embeddings[word] = np.array(
                    response.data[0].embedding)
            except Exception as e:
                continue

        # Sprawd≈∫ ka≈ºde s≈Çowo z tekstu
        for word_in_text in words_in_text:
            if len(word_in_text) < 3:  # Ignoruj bardzo kr√≥tkie s≈Çowa
                continue

            # Sprawd≈∫ czy s≈Çowo jest identyczne (dok≈Çadne dopasowanie)
            exact_match = False
            for query_word in query_words:
                if word_in_text.lower() == query_word.lower():
                    exact_match = True
                    break

            if exact_match:
                pattern = re.compile(
                    r'\b' + re.escape(word_in_text) + r'\b', re.IGNORECASE)
                highlighted_text = pattern.sub(
                    lambda m: f'<mark style="background-color: #FFEB3B; padding: 2px 4px; border-radius: 3px; font-weight: bold;">{m.group()}</mark>',
                    highlighted_text
                )
                continue

            # Sprawd≈∫ podobie≈Ñstwo semantyczne przez embeddings
            best_similarity = 0

            try:
                response = openai_client.embeddings.create(
                    input=word_in_text,
                    model="text-embedding-3-small"
                )
                text_word_embedding = np.array(response.data[0].embedding)

                # Por√≥wnaj z ka≈ºdym s≈Çowem z zapytania
                for query_word, query_embedding in query_word_embeddings.items():
                    # Oblicz podobie≈Ñstwo cosinusowe
                    similarity = np.dot(text_word_embedding, query_embedding) / (
                        np.linalg.norm(text_word_embedding) *
                        np.linalg.norm(query_embedding)
                    )

                    if similarity > best_similarity:
                        best_similarity = similarity

                # Je≈õli podobie≈Ñstwo jest wysokie (powy≈ºej 0.6), pod≈õwietl s≈Çowo
                if best_similarity > 0.6:
                    pattern = re.compile(
                        r'\b' + re.escape(word_in_text) + r'\b', re.IGNORECASE)
                    highlighted_text = pattern.sub(
                        lambda m: f'<mark style="background-color: #FFEB3B; padding: 2px 4px; border-radius: 3px; font-weight: bold;">{m.group()}</mark>',
                        highlighted_text
                    )
            except Exception:
                continue

        return highlighted_text

    except Exception:
        # Fallback do prostego dopasowania
        return highlight_text_fallback(text, query)


def highlight_text_fallback(text, query):
    """
    Fallback highlighting u≈ºywajƒÖcy prostego dopasowania tekstu
    """
    if not query:
        return text

    import re

    query_words = query.lower().split()
    highlighted_text = text

    for word in query_words:
        if len(word) < 3:
            continue

        # Pod≈õwietl dok≈Çadne dopasowania
        pattern = re.compile(r'\b' + re.escape(word) + r'\b', re.IGNORECASE)
        highlighted_text = pattern.sub(
            lambda m: f'<mark style="background-color: #FFEB3B; padding: 2px 4px; border-radius: 3px; font-weight: bold;">{m.group()}</mark>',
            highlighted_text
        )

    return highlighted_text


def add_note_to_db(note_text, categories=None, source_type="audio", media_url=None, media_type=None, timestamps=None, multiple_images_data=None):
    """Zapisuje notatkƒô do PostgreSQL i Qdrant

    Args:
        timestamps: Lista segment√≥w z timestampami {'start': float, 'end': float, 'text': str}
        multiple_images_data: Lista danych obrazk√≥w dla source_type='image'
    """
    conn = get_postgres_connection()

    # Je≈õli brak PostgreSQL, u≈ºyj starej metody (tylko Qdrant)
    if not conn:
        qdrant_client = get_qdrant_client()
        points_count = qdrant_client.count(
            collection_name=QDRANT_COLLECTION_NAME,
            exact=True,
        )
        timestamp = datetime.now().isoformat()
        payload = {
            "text": note_text,
            "timestamp": timestamp,
            "source_type": source_type,
            "categories": categories or [],
            "media_url": media_url,
            "media_type": media_type,
            "timestamps": timestamps,  # Timestampy segment√≥w
            "multiple_images_data": multiple_images_data,  # Dane o wielu obrazkach
        }
        qdrant_client.upsert(
            collection_name=QDRANT_COLLECTION_NAME,
            points=[
                PointStruct(
                    id=points_count.count + 1,
                    vector=get_embedding(text=note_text),
                    payload=payload,
                )
            ]
        )
        return

    # Nowa metoda z PostgreSQL + Qdrant
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            # 1. Dodaj notatkƒô do Qdrant i pobierz ID
            qdrant_client = get_qdrant_client()
            points_count = qdrant_client.count(
                collection_name=QDRANT_COLLECTION_NAME,
                exact=True,
            )
            qdrant_id = points_count.count + 1

            # 2. Zapisz do PostgreSQL
            cur.execute("""
                INSERT INTO notes (text, source_type, media_url, media_type, qdrant_id, timestamps, multiple_images_data)
                VALUES (%s, %s, %s, %s, %s, %s::jsonb, %s::jsonb)
                RETURNING id
            """, (note_text, source_type, media_url, media_type, qdrant_id, json.dumps(timestamps) if timestamps else None, json.dumps(multiple_images_data) if multiple_images_data else None))

            note_id = cur.fetchone()["id"]

            # 3. Obs≈Çuga kategorii
            if categories:
                for cat_name in categories:
                    # Utw√≥rz kategoriƒô je≈õli nie istnieje
                    cur.execute("""
                        INSERT INTO categories (name)
                        VALUES (%s)
                        ON CONFLICT (name) DO UPDATE SET name = EXCLUDED.name
                        RETURNING id
                    """, (cat_name,))
                    cat_id = cur.fetchone()["id"]

                    # PowiƒÖ≈º notatkƒô z kategoriƒÖ
                    cur.execute("""
                        INSERT INTO note_categories (note_id, category_id)
                        VALUES (%s, %s)
                        ON CONFLICT DO NOTHING
                    """, (note_id, cat_id))

            conn.commit()

            # 4. Dodaj do Qdrant
            timestamp = datetime.now().isoformat()
            payload = {
                "text": note_text,
                "timestamp": timestamp,
                "source_type": source_type,
                "categories": categories or [],
                "media_url": media_url,
                "media_type": media_type,
                "postgres_id": note_id,
                "timestamps": timestamps,  # Timestampy segment√≥w
                "multiple_images_data": multiple_images_data,  # Dane o wielu obrazkach
            }

            qdrant_client.upsert(
                collection_name=QDRANT_COLLECTION_NAME,
                points=[
                    PointStruct(
                        id=qdrant_id,
                        vector=get_embedding(text=note_text),
                        payload=payload,
                    )
                ]
            )

    except Exception as e:
        conn.rollback()
        st.error(f"B≈ÇƒÖd zapisu do bazy: {str(e)}")
    finally:
        conn.close()


def list_notes_from_db(search_query=None, category_filter=None, date_from=None, date_to=None, limit=50) -> list[Any]:
    """Pobiera notatki z PostgreSQL lub Qdrant"""
    conn = get_postgres_connection()

    # Je≈õli brak PostgreSQL, u≈ºyj starej metody (tylko Qdrant)
    if not conn:
        qdrant_client = get_qdrant_client()
        filter_conditions = []
        if category_filter:
            filter_conditions.append(FieldCondition(
                key="categories", match=MatchValue(value=category_filter)))
        if date_from:
            filter_conditions.append(FieldCondition(
                key="timestamp", range=Range(gte=date_from.isoformat())))
        if date_to:
            date_to_end = datetime.combine(date_to, datetime.max.time())
            filter_conditions.append(FieldCondition(
                key="timestamp", range=Range(lte=date_to_end.isoformat())))
        query_filter = Filter(
            must=filter_conditions) if filter_conditions else None

        if not search_query:
            notes = qdrant_client.scroll(
                collection_name=QDRANT_COLLECTION_NAME, limit=limit, scroll_filter=query_filter)[0]
            result = []
            for record in notes:
                if record.payload:
                    result.append({
                        "text": record.payload.get("text", ""),
                        "score": None,
                        "timestamp": record.payload.get("timestamp", ""),
                        "source_type": record.payload.get("source_type", "audio"),
                        "categories": record.payload.get("categories", []),
                        "media_url": record.payload.get("media_url"),
                        "media_type": record.payload.get("media_type"),
                        # Timestampy segment√≥w
                        "timestamps": record.payload.get("timestamps"),
                        # Dane o obrazkach
                        "multiple_images_data": record.payload.get("multiple_images_data"),
                    })
            result.sort(key=lambda x: x["timestamp"], reverse=True)
            return result
        else:
            notes = qdrant_client.query_points(collection_name=QDRANT_COLLECTION_NAME, query=get_embedding(
                text=search_query), limit=limit, query_filter=query_filter).points
            result = []
            for record in notes:
                if record.payload:
                    result.append({
                        "text": record.payload.get("text", ""),
                        "score": record.score,
                        "timestamp": record.payload.get("timestamp", ""),
                        "source_type": record.payload.get("source_type", "audio"),
                        "categories": record.payload.get("categories", []),
                        "media_url": record.payload.get("media_url"),
                        "media_type": record.payload.get("media_type"),
                        # Timestampy segment√≥w
                        "timestamps": record.payload.get("timestamps"),
                        # Dane o obrazkach
                        "multiple_images_data": record.payload.get("multiple_images_data"),
                    })
            return result

    # Nowa metoda z PostgreSQL
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            # Bez wyszukiwania semantycznego - pobierz z PostgreSQL
            if not search_query:
                sql = """
                    SELECT 
                        n.id,
                        n.text,
                        n.timestamp,
                        n.source_type,
                        n.media_url,
                        n.media_type,
                        n.qdrant_id,
                        n.timestamps,
                        n.multiple_images_data,
                        COALESCE(
                            json_agg(c.name) FILTER (WHERE c.name IS NOT NULL),
                            '[]'::json
                        ) as categories
                    FROM notes n
                    LEFT JOIN note_categories nc ON n.id = nc.note_id
                    LEFT JOIN categories c ON nc.category_id = c.id
                    WHERE 1=1
                """
                params = []

                if category_filter:
                    sql += " AND c.name = %s"
                    params.append(category_filter)

                if date_from:
                    sql += " AND n.timestamp >= %s"
                    params.append(date_from)

                if date_to:
                    date_to_end = datetime.combine(
                        date_to, datetime.max.time())
                    sql += " AND n.timestamp <= %s"
                    params.append(date_to_end)

                sql += " GROUP BY n.id ORDER BY n.timestamp DESC LIMIT %s"
                params.append(limit)

                cur.execute(sql, params)
                rows = cur.fetchall()

                result = []
                for row in rows:
                    result.append({
                        "id": row["id"],
                        "qdrant_id": row["qdrant_id"],
                        "text": row["text"],
                        "score": None,
                        "timestamp": row["timestamp"].isoformat() if row["timestamp"] else "",
                        "source_type": row["source_type"],
                        "categories": row["categories"] if isinstance(row["categories"], list) else json.loads(row["categories"]),
                        "media_url": row["media_url"],
                        "media_type": row["media_type"],
                        # JSONB z timestampami
                        "timestamps": row["timestamps"],
                        # Dane o obrazkach
                        "multiple_images_data": row.get("multiple_images_data"),
                    })
                return result

            # Z wyszukiwaniem semantycznym - u≈ºyj Qdrant + PostgreSQL
            else:
                qdrant_client = get_qdrant_client()

                # Wyszukaj w Qdrant
                notes = qdrant_client.query_points(
                    collection_name=QDRANT_COLLECTION_NAME,
                    query=get_embedding(text=search_query),
                    limit=limit * 2,  # Pobierz wiƒôcej, bo bƒôdziemy filtrowaƒá
                ).points

                # Pobierz IDs z PostgreSQL
                postgres_ids = [record.payload.get(
                    "postgres_id") for record in notes if record.payload.get("postgres_id")]

                if not postgres_ids:
                    return []

                # Pobierz szczeg√≥≈Çy z PostgreSQL
                sql = """
                    SELECT 
                        n.id,
                        n.text,
                        n.timestamp,
                        n.source_type,
                        n.media_url,
                        n.media_type,
                        n.qdrant_id,
                        n.timestamps,
                        n.multiple_images_data,
                        COALESCE(
                            json_agg(c.name) FILTER (WHERE c.name IS NOT NULL),
                            '[]'::json
                        ) as categories
                    FROM notes n
                    LEFT JOIN note_categories nc ON n.id = nc.note_id
                    LEFT JOIN categories c ON nc.category_id = c.id
                    WHERE n.id = ANY(%s)
                """
                params = [postgres_ids]

                if category_filter:
                    sql += " AND c.name = %s"
                    params.append(category_filter)

                if date_from:
                    sql += " AND n.timestamp >= %s"
                    params.append(date_from)

                if date_to:
                    date_to_end = datetime.combine(
                        date_to, datetime.max.time())
                    sql += " AND n.timestamp <= %s"
                    params.append(date_to_end)

                sql += " GROUP BY n.id ORDER BY n.timestamp DESC LIMIT %s"
                params.append(limit)

                cur.execute(sql, params)
                rows = cur.fetchall()

                # Mapuj score z Qdrant
                score_map = {record.payload.get(
                    "postgres_id"): record.score for record in notes if record.payload.get("postgres_id")}

                result = []
                for row in rows:
                    result.append({
                        "id": row["id"],
                        "qdrant_id": row["qdrant_id"],
                        "text": row["text"],
                        "score": score_map.get(row["id"]),
                        "timestamp": row["timestamp"].isoformat() if row["timestamp"] else "",
                        "source_type": row["source_type"],
                        "categories": row["categories"] if isinstance(row["categories"], list) else json.loads(row["categories"]),
                        "media_url": row["media_url"],
                        "media_type": row["media_type"],
                        # JSONB z timestampami
                        "timestamps": row["timestamps"],
                        # Dane o obrazkach
                        "multiple_images_data": row.get("multiple_images_data"),
                    })

                # Sortuj wg score
                result.sort(key=lambda x: x["score"]
                            if x["score"] else 0, reverse=True)
                return result

    except Exception as e:
        st.error(f"B≈ÇƒÖd pobierania notatek: {str(e)}")
        return []
    finally:
        conn.close()


def get_all_categories() -> list[str]:
    """Pobiera wszystkie unikalne kategorie z bazy"""
    conn = get_postgres_connection()

    # Je≈õli brak PostgreSQL, u≈ºyj starej metody
    if not conn:
        qdrant_client = get_qdrant_client()
        notes = qdrant_client.scroll(
            collection_name=QDRANT_COLLECTION_NAME,
            limit=1000,
            with_payload=True,
        )[0]
        categories = set()
        for record in notes:
            if record.payload and "categories" in record.payload:
                categories.update(record.payload["categories"])
        return sorted(list(categories))

    # Nowa metoda z PostgreSQL
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT name FROM categories ORDER BY name")
            rows = cur.fetchall()
            return [row[0] for row in rows]
    except Exception as e:
        st.error(f"B≈ÇƒÖd pobierania kategorii: {str(e)}")
        return []
    finally:
        conn.close()


def delete_note(note_id, qdrant_id):
    """Usuwa notatkƒô z PostgreSQL, Qdrant oraz plik z DigitalOcean Spaces (je≈õli istnieje)."""
    conn = get_postgres_connection()

    # Je≈õli brak PostgreSQL, usu≈Ñ tylko z Qdrant
    if not conn:
        qdrant_client = get_qdrant_client()
        try:
            qdrant_client.delete(
                collection_name=QDRANT_COLLECTION_NAME,
                points_selector=[qdrant_id]
            )
            return True
        except Exception as e:
            st.error(f"B≈ÇƒÖd usuwania z Qdrant: {str(e)}")
            return False

    # Usu≈Ñ z PostgreSQL (zwr√≥ƒá media_url, je≈õli istnieje) i Qdrant
    try:
        media_url = None
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            # Pobierz URL pliku przed usuniƒôciem rekordu
            try:
                cur.execute(
                    "SELECT media_url FROM notes WHERE id = %s", (note_id,))
                row = cur.fetchone()
                media_url = (row or {}).get("media_url")
            except Exception:
                media_url = None

            cur.execute("DELETE FROM notes WHERE id = %s", (note_id,))
        conn.commit()

        # Usu≈Ñ z Qdrant
        qdrant_client = get_qdrant_client()
        qdrant_client.delete(
            collection_name=QDRANT_COLLECTION_NAME,
            points_selector=[qdrant_id]
        )

        # Usu≈Ñ plik ze Spaces, je≈õli mamy URL
        if media_url:
            delete_file_from_spaces(media_url)

        return True
    except Exception as e:
        conn.rollback()
        st.error(f"B≈ÇƒÖd usuwania notatki: {str(e)}")
        return False
    finally:
        conn.close()


def update_note_categories(note_id, new_categories):
    """Aktualizuje kategorie notatki w PostgreSQL i Qdrant"""
    conn = get_postgres_connection()

    if not conn:
        st.error("Wymaga po≈ÇƒÖczenia z PostgreSQL")
        return False

    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            # Pobierz qdrant_id
            cur.execute(
                "SELECT qdrant_id FROM notes WHERE id = %s", (note_id,))
            result = cur.fetchone()
            if not result:
                st.error("Notatka nie znaleziona")
                return False

            qdrant_id = result["qdrant_id"]

            # Usu≈Ñ stare powiƒÖzania kategorii
            cur.execute(
                "DELETE FROM note_categories WHERE note_id = %s", (note_id,))

            # Dodaj nowe kategorie
            for cat_name in new_categories:
                # Utw√≥rz kategoriƒô je≈õli nie istnieje
                cur.execute("""
                    INSERT INTO categories (name)
                    VALUES (%s)
                    ON CONFLICT (name) DO UPDATE SET name = EXCLUDED.name
                    RETURNING id
                """, (cat_name,))
                cat_id = cur.fetchone()["id"]

                # PowiƒÖ≈º notatkƒô z kategoriƒÖ
                cur.execute("""
                    INSERT INTO note_categories (note_id, category_id)
                    VALUES (%s, %s)
                    ON CONFLICT DO NOTHING
                """, (note_id, cat_id))

        conn.commit()

        # Aktualizuj w Qdrant
        qdrant_client = get_qdrant_client()
        qdrant_client.set_payload(
            collection_name=QDRANT_COLLECTION_NAME,
            payload={"categories": new_categories},
            points=[qdrant_id]
        )

        return True
    except Exception as e:
        conn.rollback()
        st.error(f"B≈ÇƒÖd aktualizacji kategorii: {str(e)}")
        return False
    finally:
        conn.close()


def update_note_text(note_id, new_text):
    """Aktualizuje tre≈õƒá notatki w PostgreSQL i Qdrant"""
    conn = get_postgres_connection()

    if not conn:
        st.error("Wymaga po≈ÇƒÖczenia z PostgreSQL")
        return False

    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            # Pobierz qdrant_id
            cur.execute(
                "SELECT qdrant_id FROM notes WHERE id = %s", (note_id,))
            result = cur.fetchone()
            if not result:
                st.error("Notatka nie znaleziona")
                return False

            qdrant_id = result["qdrant_id"]

            # Aktualizuj tekst w PostgreSQL
            cur.execute("""
                UPDATE notes 
                SET text = %s, updated_at = CURRENT_TIMESTAMP 
                WHERE id = %s
            """, (new_text, note_id))

        conn.commit()

        # Aktualizuj w Qdrant (tekst i embedding)
        qdrant_client = get_qdrant_client()
        new_embedding = get_embedding(new_text)

        # Aktualizuj zar√≥wno wektor jak i payload
        qdrant_client.update_vectors(
            collection_name=QDRANT_COLLECTION_NAME,
            points=[
                PointStruct(
                    id=qdrant_id,
                    vector=new_embedding
                )
            ]
        )

        qdrant_client.set_payload(
            collection_name=QDRANT_COLLECTION_NAME,
            payload={"text": new_text},
            points=[qdrant_id]
        )

        return True
    except Exception as e:
        conn.rollback()
        st.error(f"B≈ÇƒÖd aktualizacji tre≈õci: {str(e)}")
        return False
    finally:
        conn.close()


def get_category_stats():
    """Pobiera statystyki u≈ºycia kategorii"""
    conn = get_postgres_connection()

    if not conn:
        return []

    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute("""
                SELECT 
                    c.id,
                    c.name,
                    COUNT(nc.note_id) as note_count
                FROM categories c
                LEFT JOIN note_categories nc ON c.id = nc.category_id
                GROUP BY c.id, c.name
                ORDER BY note_count DESC, c.name
            """)
            return cur.fetchall()
    except Exception as e:
        st.error(f"B≈ÇƒÖd pobierania statystyk: {str(e)}")
        return []
    finally:
        conn.close()


def delete_category(category_id):
    """Usuwa kategoriƒô (CASCADE usuwa te≈º powiƒÖzania z notatkami)"""
    conn = get_postgres_connection()

    if not conn:
        st.error("Wymaga po≈ÇƒÖczenia z PostgreSQL")
        return False

    try:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM categories WHERE id = %s", (category_id,))
        conn.commit()
        return True
    except Exception as e:
        conn.rollback()
        st.error(f"B≈ÇƒÖd usuwania kategorii: {str(e)}")
        return False
    finally:
        conn.close()


def rename_category(category_id, new_name):
    """Zmienia nazwƒô kategorii"""
    conn = get_postgres_connection()

    if not conn:
        st.error("Wymaga po≈ÇƒÖczenia z PostgreSQL")
        return False

    try:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE categories 
                SET name = %s 
                WHERE id = %s
            """, (new_name, category_id))
        conn.commit()
        return True
    except Exception as e:
        conn.rollback()
        st.error(f"B≈ÇƒÖd zmiany nazwy kategorii: {str(e)}")
        return False
    finally:
        conn.close()


# MAIN

# System logowania z funkcjonalno≈õciƒÖ "Remember Me"
def check_password():
    """Sprawdza czy u≈ºytkownik jest zalogowany"""

    # Sprawd≈∫ czy w .env jest login i has≈Ço
    if "APP_USERNAME" not in env or "APP_PASSWORD" not in env:
        # Brak konfiguracji - aplikacja bez logowania
        return True

    def login_form():
        """Wy≈õwietla formularz logowania"""
        st.title("üîê Logowanie")
        st.markdown("---")

        with st.form("login_form"):
            username = st.text_input("Login")
            password = st.text_input("Has≈Ço", type="password")
            remember_me = st.checkbox(
                "Zapamiƒôtaj mnie", help="Zostaniesz zalogowany automatycznie przy nastƒôpnej wizycie")
            submit = st.form_submit_button("Zaloguj siƒô", type="primary")

            if submit:
                if username == env["APP_USERNAME"] and password == env["APP_PASSWORD"]:
                    st.session_state["authenticated"] = True
                    st.session_state["username"] = username

                    # Je≈õli u≈ºytkownik wybra≈Ç "Zapamiƒôtaj mnie", zapisz trwa≈ÇƒÖ sesjƒô
                    if remember_me:
                        save_persistent_session(username, remember_me=True)
                        st.session_state["remember_me"] = True

                    st.success("‚úÖ Zalogowano pomy≈õlnie!")
                    if remember_me:
                        st.info(
                            "üíæ Zostaniesz zalogowany automatycznie przy nastƒôpnej wizycie")
                    st.rerun()
                else:
                    st.error("‚ùå Nieprawid≈Çowy login lub has≈Ço")

    # Sprawd≈∫ czy u≈ºytkownik ma trwa≈ÇƒÖ sesjƒô (Remember Me)
    if not st.session_state.get("authenticated", False):
        # Sprawd≈∫ czy istnieje trwa≈Ça sesja w pliku
        persistent_session = load_persistent_session()
        if persistent_session and persistent_session.get("remember_me"):
            # Automatyczne logowanie
            st.session_state["authenticated"] = True
            st.session_state["username"] = persistent_session.get("username")
            st.session_state["remember_me"] = True
            st.info("üîÑ Automatyczne logowanie z zapamiƒôtanej sesji")

    # Sprawd≈∫ czy u≈ºytkownik jest zalogowany
    if not st.session_state.get("authenticated", False):
        login_form()
        st.stop()

    # Przycisk wylogowania w sidebar
    with st.sidebar:
        st.write(f"üë§ Zalogowany jako: **{st.session_state.get('username')}**")

        # Poka≈º informacjƒô o trwa≈Çej sesji
        if st.session_state.get("remember_me"):
            st.caption("üíæ Trwa≈Ça sesja aktywna")

        if st.button("üö™ Wyloguj siƒô"):
            # Usu≈Ñ wszystkie dane sesji
            st.session_state["authenticated"] = False
            st.session_state["username"] = None
            st.session_state["remember_me"] = False
            # Usu≈Ñ trwa≈ÇƒÖ sesjƒô z pliku
            delete_persistent_session()
            st.rerun()

    return True


# Sprawd≈∫ logowanie
check_password()

# Sprawd≈∫ czy mamy klucz OpenAI z ustawie≈Ñ lub env
settings = get_settings()
openai_key = settings.get("openai_api_key") or env.get("OPENAI_API_KEY")

if not openai_key:
    st.info("‚ö†Ô∏è **Brak klucza OpenAI** - przejd≈∫ do zak≈Çadki '‚öôÔ∏è Ustawienia' aby skonfigurowaƒá klucz API")
    st.stop()
else:
    # Ustaw klucz w session state dla kompatybilno≈õci wstecznej
    st.session_state["openai_api_key"] = openai_key
# Session state initialization
if "note_audio_text" not in st.session_state:
    st.session_state["note_audio_bytes_md5"] = None

if "note_audio_bytes" not in st.session_state:
    st.session_state["note_audio_bytes"] = None

if "note_text" not in st.session_state:
    st.session_state["note_text"] = ""

if "note_audio_text" not in st.session_state:
    st.session_state["note_audio_text"] = ""

if "note_categories" not in st.session_state:
    st.session_state["note_categories"] = []

if "source_type" not in st.session_state:
    st.session_state["source_type"] = "audio"

assure_db_collection_exists()

# Inicjalizuj PostgreSQL je≈õli jest skonfigurowany
if get_postgres_connection():
    init_postgres_tables()

with add_tab:
    st.subheader("Wybierz ≈∫r√≥d≈Ço notatki")

    source_option = st.radio(
        "≈πr√≥d≈Ço",
        ["üé§ Nagraj audio", "üìÅ Upload audio/wideo",
            "üì± Pobierz z Instagram", "üñºÔ∏è Upload obrazk√≥w", "üìù Napisz tekst"],
        horizontal=True
    )

    st.divider()

    if source_option == "üé§ Nagraj audio":
        st.session_state["source_type"] = "audio"
        note_audio = audiorecorder(
            start_prompt="üî¥ Nagraj notatkƒô",
            stop_prompt="‚èπÔ∏è Zatrzymaj nagrywanie",)

        if note_audio:
            audio = BytesIO()
            note_audio.export(audio, format="mp3")
            st.session_state["note_audio_bytes"] = audio.getvalue()
            current_md5 = md5(st.session_state["note_audio_bytes"]).hexdigest()
            if st.session_state["note_audio_bytes_md5"] != current_md5:
                st.session_state["note_audio_text"] = ""
                st.session_state["note_text"] = ""
                st.session_state["note_audio_bytes_md5"] = current_md5
                st.session_state["media_file_bytes"] = st.session_state["note_audio_bytes"]
                st.session_state["media_file_extension"] = "mp3"
                st.session_state["media_content_type"] = "audio/mp3"

            # Wy≈õwietl informacjƒô o d≈Çugo≈õci nagrania
            try:
                from pydub import AudioSegment
                audio_segment = AudioSegment.from_mp3(
                    BytesIO(st.session_state["note_audio_bytes"]))
                duration_seconds = len(audio_segment) / 1000.0
                minutes = int(duration_seconds // 60)
                seconds = int(duration_seconds % 60)
                st.info(f"‚è±Ô∏è D≈Çugo≈õƒá nagrania: {minutes}:{seconds:02d}")
            except Exception:
                pass

            st.audio(st.session_state["note_audio_bytes"], format="audio/mp3")

            if st.button("Transkrypcja", key="transcribe_audio"):
                with st.spinner("Transkrybujƒô audio..."):
                    st.session_state["note_audio_text"] = transcribe_audio(
                        st.session_state["note_audio_bytes"])

            if st.session_state["note_audio_text"]:
                st.session_state["note_text"] = st.text_area(
                    "Edytuj notatkƒô", value=st.session_state["note_audio_text"])

    elif source_option == "üìÅ Upload audio/wideo":
        uploaded_file = st.file_uploader(
            "Wybierz plik audio lub wideo",
            type=["mp3", "wav", "m4a", "ogg", "flac",
                  "mp4", "mov", "avi", "mkv", "webm"],
            help="Audio: MP3, WAV, M4A, OGG, FLAC | Wideo: MP4, MOV, AVI, MKV, WEBM"
        )

        if uploaded_file is not None:
            file_bytes = uploaded_file.read()
            file_ext = uploaded_file.name.split('.')[-1].lower()

            # Okre≈õl czy to plik audio czy wideo
            audio_formats = ["mp3", "wav", "m4a", "ogg", "flac"]
            video_formats = ["mp4", "mov", "avi", "mkv", "webm"]

            is_audio = file_ext in audio_formats
            is_video = file_ext in video_formats

            if is_audio:
                st.session_state["source_type"] = "audio"
                st.session_state["media_content_type"] = f"audio/{file_ext if file_ext != 'm4a' else 'mp4'}"

                # Zapisz plik audio
                st.session_state["media_file_bytes"] = file_bytes
                st.session_state["media_file_extension"] = file_ext
                st.session_state["note_audio_bytes"] = file_bytes

                # Wy≈õwietl podglƒÖd audio
                st.audio(
                    file_bytes, format=st.session_state["media_content_type"])

                if st.button("Transkrybuj audio", key="transcribe_uploaded_audio"):
                    with st.spinner("Transkrybujƒô audio..."):
                        st.session_state["note_audio_text"] = transcribe_audio(
                            file_bytes)
                        st.success("Transkrypcja zako≈Ñczona!")

                if st.session_state.get("note_audio_text"):
                    st.session_state["note_text"] = st.text_area(
                        "Edytuj notatkƒô", value=st.session_state["note_audio_text"])

            elif is_video:
                st.session_state["source_type"] = "video"
                st.session_state["media_content_type"] = f"video/{file_ext}"

                # Zapisz plik wideo
                st.session_state["media_file_bytes"] = file_bytes
                st.session_state["media_file_extension"] = file_ext

                # Wy≈õwietl podglƒÖd wideo
                st.video(file_bytes)

                if st.button("Ekstraktuj audio i transkrybuj", key="transcribe_video"):
                    with st.spinner("Ekstraktujƒô audio z wideo..."):
                        try:
                            audio_bytes = extract_audio_from_video(file_bytes)
                            st.session_state["note_audio_bytes"] = audio_bytes
                            st.success("Audio wyekstraktowane!")
                        except Exception as e:
                            st.error(
                                f"B≈ÇƒÖd podczas ekstrakcji audio: {str(e)}")
                            st.stop()

                    with st.spinner("Transkrybujƒô audio..."):
                        # Dla wideo pobierz te≈º timestampy
                        transcript_data = transcribe_audio(
                            st.session_state["note_audio_bytes"],
                            include_timestamps=True
                        )
                        st.session_state["note_audio_text"] = transcript_data["text"]
                        st.session_state["note_timestamps"] = transcript_data["segments"]
                        st.success("Transkrypcja zako≈Ñczona!")

                if st.session_state.get("note_audio_text"):
                    st.session_state["note_text"] = st.text_area(
                        "Edytuj notatkƒô", value=st.session_state["note_audio_text"])

                    # Poka≈º timestampy dla wideo
                    if st.session_state.get("note_timestamps"):
                        with st.expander("üìå Zobacz transkrypcjƒô z timestampami"):
                            for segment in st.session_state["note_timestamps"]:
                                start_min = int(segment["start"] // 60)
                                start_sec = int(segment["start"] % 60)
                                timestamp_str = f"{start_min:02d}:{start_sec:02d}"
                                st.markdown(
                                    f"**[{timestamp_str}]** {segment['text']}")

            else:
                st.error(f"Nieobs≈Çugiwany format pliku: {file_ext}")

    elif source_option == "üñºÔ∏è Upload obrazk√≥w":
        st.session_state["source_type"] = "image"

        # Upload wielu obrazk√≥w
        uploaded_images = st.file_uploader(
            "Wybierz obrazki (mo≈ºesz wybraƒá wiele)",
            type=["png", "jpg", "jpeg", "gif", "bmp", "tiff", "webp"],
            accept_multiple_files=True,
            help="Obs≈Çugiwane formaty: PNG, JPG, JPEG, GIF, BMP, TIFF, WEBP"
        )

        if uploaded_images:
            st.write(f"üì∏ Wybrano **{len(uploaded_images)}** obrazk√≥w")

            # Poka≈º podglƒÖd obrazk√≥w
            if len(uploaded_images) <= 6:  # Poka≈º wszystkie je≈õli ma≈Ço
                cols = st.columns(min(len(uploaded_images), 3))
                for i, img in enumerate(uploaded_images):
                    with cols[i % 3]:
                        st.image(img, caption=img.name, use_column_width=True)
            else:  # Poka≈º tylko pierwsze 6
                st.write("**PodglƒÖd pierwszych 6 obrazk√≥w:**")
                cols = st.columns(3)
                for i, img in enumerate(uploaded_images[:6]):
                    with cols[i % 3]:
                        st.image(img, caption=img.name, use_column_width=True)
                st.info(f"... i {len(uploaded_images) - 6} wiƒôcej")

            # Przetwarzanie obrazk√≥w
            if st.button("üîç Odczytaƒá tekst z obrazk√≥w", type="primary"):
                if len(uploaded_images) == 1:
                    # Pojedynczy obrazek
                    with st.spinner("Przetwarzam obrazek..."):
                        try:
                            image_bytes = uploaded_images[0].read()
                            st.session_state["media_file_bytes"] = image_bytes
                            st.session_state["media_file_extension"] = uploaded_images[0].name.split(
                                '.')[-1].lower()
                            st.session_state[
                                "media_content_type"] = f"image/{st.session_state['media_file_extension']}"

                            extracted_text = extract_text_from_image(
                                image_bytes)
                            st.session_state["note_audio_text"] = extracted_text
                            st.session_state["note_text"] = extracted_text

                            if extracted_text:
                                st.success(
                                    "‚úÖ Tekst wyekstraktowany pomy≈õlnie!")
                            else:
                                st.warning(
                                    "‚ö†Ô∏è Nie uda≈Ço siƒô odczytaƒá tekstu z obrazka")

                        except Exception as e:
                            st.error(f"‚ùå B≈ÇƒÖd: {str(e)}")
                else:
                    # Wiele obrazk√≥w
                    with st.spinner(f"Przetwarzam {len(uploaded_images)} obrazk√≥w..."):
                        try:
                            result = process_multiple_images(uploaded_images)

                            # Zapisz dane pierwszego obrazka jako g≈Ç√≥wny plik
                            if result['image_data']:
                                st.session_state["media_file_bytes"] = result['image_data'][0]['bytes']
                                st.session_state["media_file_extension"] = result['image_data'][0]['extension']
                                st.session_state["media_content_type"] = result['image_data'][0]['content_type']

                            # Ustaw tekst
                            st.session_state["note_audio_text"] = result['combined_text']
                            st.session_state["note_text"] = result['combined_text']

                            # Zapisz dane o wszystkich obrazkach
                            st.session_state["multiple_images_data"] = result['image_data']
                            st.session_state["individual_texts"] = result['individual_texts']

                            st.success(
                                f"‚úÖ Przetworzono {len(uploaded_images)} obrazk√≥w!")

                        except Exception as e:
                            st.error(f"‚ùå B≈ÇƒÖd: {str(e)}")

            # Wy≈õwietl wyekstraktowany tekst
            if st.session_state.get("note_text"):
                st.markdown("### üìù Wyekstraktowany tekst")

                # Dla wielu obrazk√≥w poka≈º szczeg√≥≈Çy
                if st.session_state.get("individual_texts") and len(st.session_state["individual_texts"]) > 1:
                    with st.expander("üìã Zobacz tekst z ka≈ºdego obrazka osobno"):
                        for item in st.session_state["individual_texts"]:
                            st.markdown(f"**{item['filename']}:**")
                            if item['text']:
                                st.text_area(
                                    "", value=item['text'], height=100, key=f"text_{item['filename']}", disabled=True)
                            else:
                                st.info("Brak tekstu do odczytania")
                            st.divider()

                # Edytowalny tekst
                st.session_state["note_text"] = st.text_area(
                    "Edytuj wyekstraktowany tekst",
                    value=st.session_state["note_text"],
                    height=300
                )

    elif source_option == "üì± Pobierz z Instagram":
        st.session_state["source_type"] = "instagram"

        st.info("‚ÑπÔ∏è Obs≈Çugiwane: Reels, Posty z wideo, IGTV")

        # Sprawd≈∫ czy u≈ºytkownik ma skonfigurowane dane logowania
        settings = get_settings()
        has_instagram_creds = bool(settings.get(
            "instagram_username") and settings.get("instagram_password"))

        if has_instagram_creds:
            st.success(
                "‚úÖ **Dane logowania do Instagrama skonfigurowane** - aplikacja bƒôdzie pr√≥bowaƒá logowania je≈õli potrzeba")
            st.warning(
                "‚ö†Ô∏è **Uwaga:** Instagram mo≈ºe wymagaƒá autentykacji. Aplikacja automatycznie pr√≥buje r√≥≈ºne metody pobierania (bez cookies, z cookies Opery/Chrome/Firefox, oraz z logowaniem). Upewnij siƒô, ≈ºe link jest publiczny i profil nie jest prywatny.")
        else:
            st.warning(
                "‚ö†Ô∏è **Uwaga:** Instagram mo≈ºe wymagaƒá autentykacji. Aplikacja automatycznie pr√≥buje r√≥≈ºne metody pobierania (bez cookies, z cookies Opery/Chrome/Firefox).")
            st.info("üí° **Wskaz√≥wka:** Je≈õli pobieranie siƒô nie powodzi, mo≈ºesz skonfigurowaƒá dane logowania do Instagrama w panelu ustawie≈Ñ, aby zwiƒôkszyƒá szanse powodzenia.")

        instagram_url = st.text_input(
            "üîó URL do rolki/wideo Instagram",
            placeholder="https://www.instagram.com/reel/...",
            help="Wklej link do rolki, posta z wideo lub IGTV"
        )

        if instagram_url and st.button("üì• Pobierz i przetw√≥rz", type="primary"):
            # Walidacja URL
            if not is_instagram_url(instagram_url):
                st.error(
                    "‚ùå To nie wyglƒÖda na prawid≈Çowy URL Instagram. Sprawd≈∫ link!")
                st.stop()

            try:
                # Pobieranie wideo
                with st.spinner("üì• Pobieram wideo z Instagram..."):
                    video_data = download_instagram_video(instagram_url)
                    st.success("‚úÖ Wideo pobrane!")

                # Zapisz dane wideo
                st.session_state["media_file_bytes"] = video_data["video_bytes"]
                st.session_state["media_file_extension"] = "mp4"
                st.session_state["media_content_type"] = "video/mp4"
                st.session_state["instagram_metadata"] = {
                    "title": video_data["title"],
                    "author": video_data["author"],
                    "description": video_data["description"],
                    "url": video_data["url"],
                    "duration": video_data["duration"]
                }

                # Poka≈º metadane
                st.markdown("### üìä Informacje o wideo")
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**Autor:** {video_data['author']}")
                    st.write(f"**D≈Çugo≈õƒá:** {video_data['duration']}s")
                with col2:
                    st.write(f"**Tytu≈Ç:** {video_data['title'][:50]}...")

                if video_data.get("description"):
                    with st.expander("üìù Zobacz opis"):
                        st.write(video_data["description"])

                # PodglƒÖd wideo
                st.video(video_data["video_bytes"])

                # Ekstrakcja audio i transkrypcja
                with st.spinner("üéµ Ekstraktujƒô audio z wideo..."):
                    audio_bytes = extract_audio_from_video(
                        video_data["video_bytes"])
                    st.session_state["note_audio_bytes"] = audio_bytes
                    st.success("‚úÖ Audio wyekstraktowane!")

                with st.spinner("‚úçÔ∏è Transkrybujƒô audio (mo≈ºe to chwilƒô potrwaƒá)..."):
                    transcript_data = transcribe_audio(
                        audio_bytes,
                        include_timestamps=True
                    )
                    st.session_state["note_audio_text"] = transcript_data["text"]
                    st.session_state["note_timestamps"] = transcript_data["segments"]
                    st.success("‚úÖ Transkrypcja zako≈Ñczona!")

            except Exception as e:
                st.error(f"‚ùå B≈ÇƒÖd: {str(e)}")

                # Dodatkowe wskaz√≥wki dla typowych b≈Çƒôd√≥w Instagram
                error_msg = str(e)
                if "login required" in error_msg or "rate-limit" in error_msg:
                    st.warning("""
                    **üîê Problem z autentykacjƒÖ Instagram:**
                    
                    Instagram wymaga teraz logowania dla niekt√≥rych tre≈õci. Aby to naprawiƒá:
                    
                    1. **Upewnij siƒô, ≈ºe link jest publiczny** - prywatne profile nie dzia≈ÇajƒÖ
                    2. **Spr√≥buj ponownie za kilka minut** - Instagram ma ograniczenia czƒôstotliwo≈õci
                    3. **Sprawd≈∫ czy profil jest aktywny** - nieaktywne konta mogƒÖ nie dzia≈Çaƒá
                    4. **Spr√≥buj innego linku** - niekt√≥re posty mogƒÖ byƒá zablokowane
                    
                    To ograniczenie ze strony Instagram, nie aplikacji.
                    """)
                elif ("unsupported keyring" in error_msg or "cookiesfrombrowser" in error_msg or
                      "could not find chrome cookies database" in error_msg or
                      "could not find opera cookies database" in error_msg or
                      "could not find firefox cookies database" in error_msg):
                    st.info("""
                    **üîß Problem z cookies przeglƒÖdarki:**
                    
                    Aplikacja pr√≥bowa≈Ça pobraƒá cookies z przeglƒÖdarki (Opera/Chrome/Firefox), 
                    ale napotka≈Ça problem z dostƒôpem do bazy cookies. 
                    
                    Automatycznie spr√≥bowa≈Ça alternatywnych metod pobierania w kolejno≈õci:
                    1. Bez cookies (najbardziej niezawodne)
                    2. Cookies z Opery
                    3. Cookies z Chrome
                    4. Cookies z Firefox
                    
                    Je≈õli nadal masz problemy:
                    - Upewnij siƒô, ≈ºe link jest publiczny
                    - Profil nie mo≈ºe byƒá prywatny  
                    - Spr√≥buj innego linku
                    """)
                else:
                    st.info("""
                    **üí° Wskaz√≥wki:**
                    - Upewnij siƒô, ≈ºe link jest prawid≈Çowy i publiczny
                    - Profil nie mo≈ºe byƒá prywatny
                    - Spr√≥buj innego linku lub poczekaj chwilƒô
                    """)
                st.stop()

        # Wy≈õwietl transkrypcjƒô i pozw√≥l na edycjƒô
        if st.session_state.get("note_audio_text"):
            st.markdown("### üìù Transkrypcja")

            # Dodaj metadane Instagram do tekstu notatki (opcjonalnie)
            if st.session_state.get("instagram_metadata"):
                meta = st.session_state["instagram_metadata"]
                default_text = f"üé• Instagram: {meta['author']}\nüîó {meta['url']}\n\n{st.session_state['note_audio_text']}"
            else:
                default_text = st.session_state["note_audio_text"]

            st.session_state["note_text"] = st.text_area(
                "Edytuj notatkƒô",
                value=default_text,
                height=300
            )

            # Poka≈º timestampy
            if st.session_state.get("note_timestamps"):
                with st.expander("üìå Zobacz transkrypcjƒô z timestampami"):
                    for segment in st.session_state["note_timestamps"]:
                        start_min = int(segment["start"] // 60)
                        start_sec = int(segment["start"] % 60)
                        timestamp_str = f"{start_min:02d}:{start_sec:02d}"
                        st.markdown(f"**[{timestamp_str}]** {segment['text']}")

    else:  # Napisz tekst
        st.session_state["source_type"] = "text"
        st.session_state["media_file_bytes"] = None  # Brak pliku dla tekstu
        st.session_state["note_text"] = st.text_area(
            "Wprowad≈∫ tre≈õƒá notatki",
            value=st.session_state.get("note_text", ""),
            height=200
        )

    # Dodawanie kategorii
    st.divider()
    st.subheader("Katalogowanie notatki")

    # Inicjalizuj note_categories je≈õli nie istnieje
    if "note_categories" not in st.session_state:
        st.session_state["note_categories"] = []

    col1, col2 = st.columns([3, 1])

    with col1:
        existing_categories = get_all_categories()

        # Multiselect ze wszystkimi kategoriami (istniejƒÖce + nowe dodane lokalnie)
        all_available_categories = list(
            set(existing_categories + st.session_state["note_categories"]))

        selected_categories = st.multiselect(
            "Wybierz kategorie",
            options=all_available_categories,
            default=st.session_state["note_categories"],
            key="category_multiselect"
        )

        # Aktualizuj session_state na podstawie wyboru
        st.session_state["note_categories"] = selected_categories

    with col2:
        new_category = st.text_input(
            "Nowa kategoria", key="new_category_input")
        if st.button("‚ûï Dodaj", key="add_category_btn") and new_category:
            if new_category not in st.session_state["note_categories"]:
                st.session_state["note_categories"].append(new_category)
                st.rerun()

    if st.session_state["note_categories"]:
        st.write("Wybrane kategorie:", ", ".join(
            st.session_state["note_categories"]))

    # Zapisz notatkƒô
    st.divider()

    # Opcja zapisu pliku do Spaces
    save_media = False
    if st.session_state.get("media_file_bytes") and get_spaces_client():
        save_media = st.checkbox(
            "üíæ Zapisz oryginalny plik audio/wideo w DigitalOcean Spaces",
            value=True,
            help="Plik bƒôdzie dostƒôpny do odtworzenia w przysz≈Ço≈õci"
        )

    if st.session_state.get("note_text") and st.button(
        "üíæ Zapisz notatkƒô",
        disabled=not st.session_state.get("note_text"),
        type="primary"
    ):
        media_url = None
        media_type = None

        # Upload pliku do Spaces je≈õli wybrano
        if save_media and st.session_state.get("media_file_bytes"):
            with st.spinner("Uploadujƒô plik do Spaces..."):
                media_url = upload_file_to_spaces(
                    st.session_state["media_file_bytes"],
                    st.session_state.get("media_file_extension", "mp3"),
                    st.session_state.get("media_content_type", "audio/mp3")
                )
                if media_url:
                    media_type = st.session_state.get("media_content_type")
                    st.success("‚úÖ Plik zapisany w Spaces")
                else:
                    st.warning(
                        "‚ö†Ô∏è Nie uda≈Ço siƒô zapisaƒá pliku w Spaces, ale notatka zostanie zapisana bez za≈ÇƒÖcznika")

        # Zapisz notatkƒô do bazy
        add_note_to_db(
            note_text=st.session_state["note_text"],
            categories=st.session_state["note_categories"],
            source_type=st.session_state["source_type"],
            media_url=media_url,
            media_type=media_type,
            timestamps=st.session_state.get(
                "note_timestamps"),  # Timestampy dla wideo/audio
            multiple_images_data=st.session_state.get(
                "multiple_images_data")  # Dane o obrazkach
        )
        st.toast("Notatka zapisana", icon="üéâ")

        # Reset state
        st.session_state["note_text"] = ""
        st.session_state["note_audio_text"] = ""
        st.session_state["note_categories"] = []
        st.session_state["media_file_bytes"] = None
        st.session_state["note_timestamps"] = None  # Wyczy≈õƒá timestampy
        # Wyczy≈õƒá dane o obrazkach
        st.session_state["multiple_images_data"] = None
        # Wyczy≈õƒá indywidualne teksty
        st.session_state["individual_texts"] = None
        st.rerun()


with search_tab:
    st.subheader("Wyszukaj notatki")

    # Formularz wyszukiwania - Enter automatycznie uruchamia wyszukiwanie
    with st.form("search_form"):
        query = st.text_input("Wyszukaj notatkƒô",
                              placeholder="Wpisz s≈Çowa kluczowe...")

        col1, col2 = st.columns(2)

        with col1:
            categories = get_all_categories()
            selected_category = st.selectbox(
                "Filtruj po kategorii",
                options=["Wszystkie"] + categories
            )

        with col2:
            show_context = st.checkbox(
                "ü§ñ Poka≈º kontekst AI",
                value=True,
                help="Generuje wyja≈õnienie dlaczego notatka pasuje do zapytania (wymaga API OpenAI)"
            )

        search_submitted = st.form_submit_button("üîç Szukaj", type="primary")

    if search_submitted:
        category_filter = selected_category if selected_category != "Wszystkie" else None
        notes = list_notes_from_db(query, category_filter=category_filter)

        if notes:
            st.write(f"Znaleziono: **{len(notes)}** notatek")

            # Generuj konteksty dla wszystkich wynik√≥w (z progress bar)
            if query and show_context:  # Tylko je≈õli by≈Ço wyszukiwanie tekstowe i opcja w≈ÇƒÖczona
                with st.spinner("Analizujƒô wyniki za pomocƒÖ AI..."):
                    for note_item in notes:
                        context = generate_search_context(
                            query, note_item.get("text", ""))
                        note_item["search_context"] = context

            for idx, note_item in enumerate(notes):
                note_id = note_item.get("id")
                qdrant_id = note_item.get("qdrant_id")
                note_key = f"search_{idx}"

                # Nag≈Ç√≥wek z metadanymi
                col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
                with col1:
                    if note_item.get("timestamp"):
                        dt = datetime.fromisoformat(note_item["timestamp"])
                        st.caption(f"üìÖ {dt.strftime('%Y-%m-%d %H:%M')}")
                with col2:
                    source_icons = {"audio": "üé§",
                                    "video": "üé•", "text": "üìù", "image": "üñºÔ∏è", "instagram": "üì±"}
                    icon = source_icons.get(
                        note_item.get("source_type", "audio"), "üìù")
                    st.caption(
                        f"{icon} {note_item.get('source_type', 'audio')}")
                with col3:
                    if note_item.get("score"):
                        st.caption(f"‚≠ê {note_item['score']:.4f}")
                with col4:
                    # Przyciski akcji
                    action_col1, action_col2 = st.columns(2)
                    with action_col1:
                        if st.button("‚úèÔ∏è", key=f"edit_{note_key}", help="Edytuj notatkƒô"):
                            st.session_state[f"editing_{note_key}"] = True
                    with action_col2:
                        if st.button("üóëÔ∏è", key=f"delete_{note_key}", help="Usu≈Ñ notatkƒô", type="secondary"):
                            if delete_note(note_id, qdrant_id):
                                st.success("Notatka usuniƒôta!")
                                st.rerun()

                # Zwijane notatki z st.expander
                with st.expander(f"üìù {note_item.get('text', '')[:50]}{'...' if len(note_item.get('text', '')) > 50 else ''}", expanded=False):

                    # Kontekst wyszukiwania (je≈õli dostƒôpny)
                    if note_item.get("search_context"):
                        st.info(
                            f"üîç **Dlaczego pasuje:** {note_item['search_context']}")

                    # Media player je≈õli plik jest dostƒôpny
                    if note_item.get("media_url"):
                        media_type = note_item.get("media_type", "")
                        if media_type.startswith("audio"):
                            st.audio(note_item["media_url"])
                        elif media_type.startswith("video"):
                            st.video(note_item["media_url"])
                        elif media_type.startswith("image"):
                            st.image(note_item["media_url"])

                    # Timestampy dla wideo/audio
                    if note_item.get("timestamps") and note_item.get("source_type") in ["video", "audio"]:
                        with st.expander("üìå Transkrypcja z timestampami"):
                            for segment in note_item["timestamps"]:
                                start_min = int(segment["start"] // 60)
                                start_sec = int(segment["start"] % 60)
                                timestamp_str = f"{start_min:02d}:{start_sec:02d}"
                                st.markdown(
                                    f"**[{timestamp_str}]** {segment['text']}")

                    # Edycja notatki
                    if st.session_state.get(f"editing_{note_key}", False):
                        st.divider()

                        # Edycja tre≈õci
                        new_text = st.text_area(
                            "Edytuj tre≈õƒá notatki",
                            value=note_item.get("text", ""),
                            height=150,
                            key=f"text_{note_key}"
                        )

                        # Edycja kategorii
                        all_cats = get_all_categories()
                        new_categories = st.multiselect(
                            "Zmie≈Ñ kategorie",
                            options=all_cats,
                            default=note_item.get("categories", []),
                            key=f"cats_{note_key}"
                        )

                        col_save, col_cancel = st.columns(2)
                        with col_save:
                            if st.button("üíæ Zapisz zmiany", key=f"save_{note_key}", type="primary"):
                                success = True
                                # Aktualizuj tekst je≈õli siƒô zmieni≈Ç
                                if new_text != note_item.get("text"):
                                    success = success and update_note_text(
                                        note_id, new_text)
                                # Aktualizuj kategorie je≈õli siƒô zmieni≈Çy
                                if set(new_categories) != set(note_item.get("categories", [])):
                                    success = success and update_note_categories(
                                        note_id, new_categories)

                                if success:
                                    st.success("Notatka zaktualizowana!")
                                    st.session_state[f"editing_{note_key}"] = False
                                    st.rerun()
                        with col_cancel:
                            if st.button("‚ùå Anuluj", key=f"cancel_{note_key}"):
                                st.session_state[f"editing_{note_key}"] = False
                                st.rerun()
                    else:
                        # Wy≈õwietl wiele obrazk√≥w je≈õli dostƒôpne
                        if note_item.get("source_type") == "image" and note_item.get("multiple_images_data"):
                            with st.expander("üñºÔ∏è Zobacz wszystkie obrazki"):
                                images_data = note_item["multiple_images_data"]
                                if len(images_data) <= 6:
                                    cols = st.columns(min(len(images_data), 3))
                                    for i, img_data in enumerate(images_data):
                                        with cols[i % 3]:
                                            st.image(
                                                img_data["bytes"], caption=img_data["name"], use_column_width=True)
                                else:
                                    st.write("**Pierwsze 6 obrazk√≥w:**")
                                    cols = st.columns(3)
                                    for i, img_data in enumerate(images_data[:6]):
                                        with cols[i % 3]:
                                            st.image(
                                                img_data["bytes"], caption=img_data["name"], use_column_width=True)
                                    st.info(
                                        f"... i {len(images_data) - 6} wiƒôcej")

                        # Tre≈õƒá notatki z pod≈õwietleniem (tylko w wyszukiwaniu)
                        if query:
                            highlighted_text = highlight_text(
                                note_item["text"], query)
                            st.markdown(highlighted_text,
                                        unsafe_allow_html=True)
                        else:
                            st.markdown(note_item["text"])

                        # Wy≈õwietl kategorie
                        if note_item.get("categories"):
                            tags = " ".join(
                                [f"`{cat}`" for cat in note_item["categories"]])
                            st.markdown(f"üè∑Ô∏è {tags}")
        else:
            st.info("Nie znaleziono notatek")


with browse_tab:
    st.subheader("PrzeglƒÖdaj wszystkie notatki")

    # Filtry
    col1, col2, col3 = st.columns(3)

    with col1:
        categories = get_all_categories()
        filter_category = st.selectbox(
            "Kategoria",
            options=["Wszystkie"] + categories,
            key="browse_category"
        )

    with col2:
        date_from = st.date_input(
            "Data od",
            value=None,
            key="browse_date_from"
        )

    with col3:
        date_to = st.date_input(
            "Data do",
            value=None,
            key="browse_date_to"
        )

    # Pobierz notatki
    category_filter = filter_category if filter_category != "Wszystkie" else None
    notes = list_notes_from_db(
        category_filter=category_filter,
        date_from=date_from,
        date_to=date_to,
        limit=100
    )

    st.write(f"Wy≈õwietlam: **{len(notes)}** notatek")

    # Grupowanie po dacie
    if notes:
        notes_by_date = {}
        for note in notes:
            if note.get("timestamp"):
                dt = datetime.fromisoformat(note["timestamp"])
                date_key = dt.strftime("%Y-%m-%d")
                if date_key not in notes_by_date:
                    notes_by_date[date_key] = []
                notes_by_date[date_key].append(note)

        # Wy≈õwietl pogrupowane notatki
        for date_key in sorted(notes_by_date.keys(), reverse=True):
            st.subheader(f"üìÖ {date_key}")
            day_notes = notes_by_date[date_key]

            for idx, note_item in enumerate(day_notes):
                note_id = note_item.get("id")
                qdrant_id = note_item.get("qdrant_id")
                note_key = f"{date_key}_{idx}"

                # Nag≈Ç√≥wek z metadanymi
                col1, col2, col3 = st.columns([2, 1, 1])
                with col1:
                    if note_item.get("timestamp"):
                        dt = datetime.fromisoformat(note_item["timestamp"])
                        st.caption(f"üïê {dt.strftime('%H:%M')}")
                with col2:
                    source_icons = {"audio": "üé§",
                                    "video": "üé•", "text": "üìù", "image": "üñºÔ∏è", "instagram": "üì±"}
                    icon = source_icons.get(
                        note_item.get("source_type", "audio"), "üìù")
                    st.caption(
                        f"{icon} {note_item.get('source_type', 'audio')}")
                with col3:
                    # Przyciski akcji
                    action_col1, action_col2 = st.columns(2)
                    with action_col1:
                        if st.button("‚úèÔ∏è", key=f"edit_{note_key}", help="Edytuj notatkƒô"):
                            st.session_state[f"editing_{note_key}"] = True
                    with action_col2:
                        if st.button("üóëÔ∏è", key=f"delete_{note_key}", help="Usu≈Ñ notatkƒô", type="secondary"):
                            if delete_note(note_id, qdrant_id):
                                st.success("Notatka usuniƒôta!")
                                st.rerun()

                # Zwijane notatki z st.expander
                with st.expander(f"üìù {note_item.get('text', '')[:50]}{'...' if len(note_item.get('text', '')) > 50 else ''}", expanded=False):

                    # Media player je≈õli plik jest dostƒôpny
                    if note_item.get("media_url"):
                        media_type = note_item.get("media_type", "")
                        if media_type.startswith("audio"):
                            st.audio(note_item["media_url"])
                        elif media_type.startswith("video"):
                            st.video(note_item["media_url"])
                        elif media_type.startswith("image"):
                            st.image(note_item["media_url"])

                    # Timestampy dla wideo/audio
                    if note_item.get("timestamps") and note_item.get("source_type") in ["video", "audio"]:
                        with st.expander("üìå Transkrypcja z timestampami"):
                            for segment in note_item["timestamps"]:
                                start_min = int(segment["start"] // 60)
                                start_sec = int(segment["start"] % 60)
                                timestamp_str = f"{start_min:02d}:{start_sec:02d}"
                                st.markdown(
                                    f"**[{timestamp_str}]** {segment['text']}")

                    # Edycja notatki
                    if st.session_state.get(f"editing_{note_key}", False):
                        st.divider()

                        # Edycja tre≈õci
                        new_text = st.text_area(
                            "Edytuj tre≈õƒá notatki",
                            value=note_item.get("text", ""),
                            height=150,
                            key=f"text_{note_key}"
                        )

                        # Edycja kategorii
                        all_cats = get_all_categories()
                        new_categories = st.multiselect(
                            "Zmie≈Ñ kategorie",
                            options=all_cats,
                            default=note_item.get("categories", []),
                            key=f"cats_{note_key}"
                        )

                        col_save, col_cancel = st.columns(2)
                        with col_save:
                            if st.button("üíæ Zapisz zmiany", key=f"save_{note_key}", type="primary"):
                                success = True
                                # Aktualizuj tekst je≈õli siƒô zmieni≈Ç
                                if new_text != note_item.get("text"):
                                    success = success and update_note_text(
                                        note_id, new_text)
                                # Aktualizuj kategorie je≈õli siƒô zmieni≈Çy
                                if set(new_categories) != set(note_item.get("categories", [])):
                                    success = success and update_note_categories(
                                        note_id, new_categories)

                                if success:
                                    st.success("Notatka zaktualizowana!")
                                    st.session_state[f"editing_{note_key}"] = False
                                    st.rerun()
                        with col_cancel:
                            if st.button("‚ùå Anuluj", key=f"cancel_{note_key}"):
                                st.session_state[f"editing_{note_key}"] = False
                                st.rerun()
                    else:
                        # Wy≈õwietl wiele obrazk√≥w je≈õli dostƒôpne
                        if note_item.get("source_type") == "image" and note_item.get("multiple_images_data"):
                            with st.expander("üñºÔ∏è Zobacz wszystkie obrazki"):
                                images_data = note_item["multiple_images_data"]
                                if len(images_data) <= 6:
                                    cols = st.columns(min(len(images_data), 3))
                                    for i, img_data in enumerate(images_data):
                                        with cols[i % 3]:
                                            st.image(
                                                img_data["bytes"], caption=img_data["name"], use_column_width=True)
                                else:
                                    st.write("**Pierwsze 6 obrazk√≥w:**")
                                    cols = st.columns(3)
                                    for i, img_data in enumerate(images_data[:6]):
                                        with cols[i % 3]:
                                            st.image(
                                                img_data["bytes"], caption=img_data["name"], use_column_width=True)
                                    st.info(
                                        f"... i {len(images_data) - 6} wiƒôcej")

                        # Tre≈õƒá notatki
                        st.markdown(note_item["text"])

                        # Wy≈õwietl kategorie
                        if note_item.get("categories"):
                            tags = " ".join(
                                [f"`{cat}`" for cat in note_item["categories"]])
                            st.markdown(f"üè∑Ô∏è {tags}")
    else:
        st.info("Brak notatek do wy≈õwietlenia")


with manage_categories_tab:
    st.subheader("ZarzƒÖdzaj kategoriami")

    # Sekcja dodawania nowej kategorii
    st.markdown("### ‚ûï Dodaj nowƒÖ kategoriƒô")
    col1, col2 = st.columns([3, 1])

    with col1:
        new_category_name = st.text_input(
            "Nazwa nowej kategorii",
            key="manage_new_category",
            placeholder="Wprowad≈∫ nazwƒô kategorii..."
        )

    with col2:
        st.write("")  # spacer
        st.write("")  # spacer
        if st.button("‚ûï Dodaj kategoriƒô", key="add_new_category_btn", type="primary"):
            if new_category_name and new_category_name.strip():
                conn = get_postgres_connection()
                if conn:
                    try:
                        with conn.cursor() as cur:
                            cur.execute("""
                                INSERT INTO categories (name)
                                VALUES (%s)
                                ON CONFLICT (name) DO NOTHING
                                RETURNING id
                            """, (new_category_name.strip(),))
                            result = cur.fetchone()

                            if result:
                                conn.commit()
                                st.success(
                                    f"‚úÖ Kategoria '{new_category_name}' dodana!")
                                st.rerun()
                            else:
                                st.warning(
                                    f"‚ö†Ô∏è Kategoria '{new_category_name}' ju≈º istnieje")
                    except Exception as e:
                        conn.rollback()
                        st.error(f"B≈ÇƒÖd dodawania kategorii: {str(e)}")
                    finally:
                        conn.close()
                else:
                    st.error("Wymaga po≈ÇƒÖczenia z PostgreSQL")
            else:
                st.warning("Wprowad≈∫ nazwƒô kategorii")

    st.divider()

    # Pobierz statystyki kategorii
    categories_stats = get_category_stats()

    if not categories_stats:
        st.info("Brak kategorii. Dodaj pierwszƒÖ kategoriƒô powy≈ºej.")
    else:
        st.markdown(f"### üìã Lista kategorii ({len(categories_stats)})")

        # Tabela z kategoriami
        for cat in categories_stats:
            cat_id = cat["id"]
            cat_name = cat["name"]
            note_count = cat["note_count"]

            with st.container(border=True):
                col1, col2, col3 = st.columns([3, 1, 1])

                with col1:
                    # Edycja nazwy
                    if st.session_state.get(f"editing_cat_{cat_id}", False):
                        new_name = st.text_input(
                            "Nowa nazwa kategorii",
                            value=cat_name,
                            key=f"catname_{cat_id}"
                        )
                    else:
                        st.markdown(f"### {cat_name}")
                        st.caption(f"U≈ºyta w **{note_count}** notatkach")

                with col2:
                    # Przycisk edycji
                    if st.session_state.get(f"editing_cat_{cat_id}", False):
                        if st.button("üíæ Zapisz", key=f"save_cat_{cat_id}", type="primary"):
                            if new_name and new_name != cat_name:
                                if rename_category(cat_id, new_name):
                                    st.success(
                                        f"Zmieniono nazwƒô na '{new_name}'")
                                    st.session_state[f"editing_cat_{cat_id}"] = False
                                    st.rerun()
                            else:
                                st.session_state[f"editing_cat_{cat_id}"] = False
                                st.rerun()
                    else:
                        if st.button("‚úèÔ∏è Zmie≈Ñ", key=f"edit_cat_{cat_id}"):
                            st.session_state[f"editing_cat_{cat_id}"] = True
                            st.rerun()

                with col3:
                    # Przycisk usuwania
                    if st.session_state.get(f"editing_cat_{cat_id}", False):
                        if st.button("‚ùå Anuluj", key=f"cancel_cat_{cat_id}"):
                            st.session_state[f"editing_cat_{cat_id}"] = False
                            st.rerun()
                    else:
                        if st.button("üóëÔ∏è Usu≈Ñ", key=f"delete_cat_{cat_id}", type="secondary"):
                            if note_count > 0:
                                st.warning(
                                    f"‚ö†Ô∏è Ta kategoria jest u≈ºyta w {note_count} notatkach. Usuniƒôcie kategorii usunie jƒÖ ze wszystkich notatek.")
                                col_confirm, col_cancel = st.columns(2)
                                with col_confirm:
                                    if st.button("‚úÖ Potwierd≈∫ usuniƒôcie", key=f"confirm_delete_{cat_id}", type="primary"):
                                        if delete_category(cat_id):
                                            st.success("Kategoria usuniƒôta!")
                                            st.rerun()
                                with col_cancel:
                                    if st.button("‚ùå Anuluj", key=f"cancel_delete_{cat_id}"):
                                        st.rerun()
                            else:
                                if delete_category(cat_id):
                                    st.success("Kategoria usuniƒôta!")
                                    st.rerun()


# ===============================
# ZAK≈ÅADKA USTAWIENIA
# ===============================

with settings_tab:
    st.subheader("‚öôÔ∏è Panel u≈ºytkownika - Ustawienia")

    # Pobierz aktualne ustawienia
    settings = get_settings()

    # Sekcja OpenAI
    st.markdown("### ü§ñ OpenAI API")
    with st.expander("Konfiguracja OpenAI", expanded=False):
        new_openai_key = st.text_input(
            "Klucz API OpenAI",
            value=settings["openai_api_key"],
            type="password",
            help="Tw√≥j klucz API z platformy OpenAI",
            key="settings_openai_key"
        )

        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("üîç Testuj po≈ÇƒÖczenie", key="test_openai"):
                if new_openai_key:
                    with st.spinner("Testujƒô po≈ÇƒÖczenie..."):
                        success, message = test_openai_connection(
                            new_openai_key)
                        if success:
                            st.success(message)
                        else:
                            st.error(message)
                else:
                    st.warning("Wprowad≈∫ klucz API")

    # Sekcja Qdrant
    st.markdown("### üîç Qdrant Vector Database")
    with st.expander("Konfiguracja Qdrant", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            new_qdrant_url = st.text_input(
                "URL Qdrant",
                value=settings["qdrant_url"],
                help="URL twojej instancji Qdrant",
                key="settings_qdrant_url"
            )
        with col2:
            new_qdrant_key = st.text_input(
                "Klucz API Qdrant",
                value=settings["qdrant_api_key"],
                type="password",
                help="Klucz API Qdrant",
                key="settings_qdrant_key"
            )

        if st.button("üîç Testuj po≈ÇƒÖczenie Qdrant", key="test_qdrant"):
            if new_qdrant_url and new_qdrant_key:
                with st.spinner("Testujƒô po≈ÇƒÖczenie z Qdrant..."):
                    success, message = test_qdrant_connection(
                        new_qdrant_url, new_qdrant_key)
                    if success:
                        st.success(message)
                    else:
                        st.error(message)
            else:
                st.warning("Wprowad≈∫ URL i klucz API")

    # Sekcja PostgreSQL
    st.markdown("### üêò PostgreSQL Database")
    with st.expander("Konfiguracja PostgreSQL", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            new_postgres_host = st.text_input(
                "Host",
                value=settings["postgres_host"],
                help="Adres hosta PostgreSQL",
                key="settings_postgres_host"
            )
            new_postgres_port = st.text_input(
                "Port",
                value=settings["postgres_port"],
                help="Port PostgreSQL",
                key="settings_postgres_port"
            )
            new_postgres_user = st.text_input(
                "U≈ºytkownik",
                value=settings["postgres_user"],
                help="Nazwa u≈ºytkownika",
                key="settings_postgres_user"
            )
        with col2:
            new_postgres_db = st.text_input(
                "Baza danych",
                value=settings["postgres_db"],
                help="Nazwa bazy danych",
                key="settings_postgres_db"
            )
            new_postgres_password = st.text_input(
                "Has≈Ço",
                value=settings["postgres_password"],
                type="password",
                help="Has≈Ço do bazy danych",
                key="settings_postgres_password"
            )
            new_postgres_sslmode = st.selectbox(
                "Tryb SSL",
                options=["require", "disable", "allow", "prefer"],
                index=["require", "disable", "allow", "prefer"].index(settings["postgres_sslmode"]) if settings["postgres_sslmode"] in [
                    "require", "disable", "allow", "prefer"] else 0,
                help="Tryb SSL dla po≈ÇƒÖczenia",
                key="settings_postgres_sslmode"
            )

        if st.button("üîç Testuj po≈ÇƒÖczenie PostgreSQL", key="test_postgres"):
            if all([new_postgres_host, new_postgres_port, new_postgres_db, new_postgres_user, new_postgres_password]):
                with st.spinner("Testujƒô po≈ÇƒÖczenie z PostgreSQL..."):
                    success, message = test_postgres_connection(
                        new_postgres_host, new_postgres_port, new_postgres_db,
                        new_postgres_user, new_postgres_password, new_postgres_sslmode
                    )
                    if success:
                        st.success(message)
                    else:
                        st.error(message)
            else:
                st.warning("Wprowad≈∫ wszystkie wymagane pola")

    # Sekcja DigitalOcean Spaces (opcjonalna)
    st.markdown("### ‚òÅÔ∏è DigitalOcean Spaces (opcjonalne)")
    with st.expander("Konfiguracja DigitalOcean Spaces", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            new_do_key = st.text_input(
                "Klucz dostƒôpu",
                value=settings["do_spaces_key"],
                help="Klucz dostƒôpu do Spaces",
                key="settings_do_key"
            )
            new_do_region = st.text_input(
                "Region",
                value=settings["do_spaces_region"],
                help="Region (np. fra1, nyc3)",
                key="settings_do_region"
            )
        with col2:
            new_do_secret = st.text_input(
                "Klucz sekretny",
                value=settings["do_spaces_secret"],
                type="password",
                help="Sekretny klucz dostƒôpu",
                key="settings_do_secret"
            )
            new_do_bucket = st.text_input(
                "Nazwa bucketa",
                value=settings["do_spaces_bucket"],
                help="Nazwa bucketa w Spaces",
                key="settings_do_bucket"
            )

    # Sekcja Instagram (opcjonalna)
    st.markdown("### üì± Instagram (opcjonalne)")
    with st.expander("Konfiguracja Instagram", expanded=False):
        st.info("""
        **‚ÑπÔ∏è Informacja o bezpiecze≈Ñstwie:** 
        Dane logowania do Instagrama sƒÖ przechowywane tylko lokalnie w sesji i NIE sƒÖ zapisywane trwale.
        U≈ºywaj tylko wtedy, gdy cookies z przeglƒÖdarki nie dzia≈ÇajƒÖ poprawnie.
        """)

        col1, col2 = st.columns(2)
        with col1:
            new_instagram_username = st.text_input(
                "Nazwa u≈ºytkownika Instagram",
                value=settings["instagram_username"],
                help="Twoja nazwa u≈ºytkownika na Instagramie",
                key="settings_instagram_username"
            )
        with col2:
            new_instagram_password = st.text_input(
                "Has≈Ço Instagram",
                value=settings["instagram_password"],
                type="password",
                help="Has≈Ço do konta Instagram (opcjonalne)",
                key="settings_instagram_password"
            )

        if new_instagram_username and new_instagram_password:
            st.success("‚úÖ Dane logowania do Instagrama zosta≈Çy ustawione")
            st.warning(
                "‚ö†Ô∏è Uwaga: Logowanie mo≈ºe wymagaƒá weryfikacji dwuetapowej lub mo≈ºe nie dzia≈Çaƒá z powodu zabezpiecze≈Ñ Instagrama.")

    # Przyciski zarzƒÖdzania
    st.divider()

    col_save, col_clear, col_secrets = st.columns([2, 1, 1])

    with col_save:
        if st.button("üíæ Zapisz wszystkie ustawienia", type="primary", key="save_all_settings"):
            # Zbierz wszystkie nowe ustawienia
            new_settings = {
                "openai_api_key": new_openai_key,
                "qdrant_url": new_qdrant_url,
                "qdrant_api_key": new_qdrant_key,
                "postgres_host": new_postgres_host,
                "postgres_port": new_postgres_port,
                "postgres_db": new_postgres_db,
                "postgres_user": new_postgres_user,
                "postgres_password": new_postgres_password,
                "postgres_sslmode": new_postgres_sslmode,
                "do_spaces_key": new_do_key,
                "do_spaces_secret": new_do_secret,
                "do_spaces_region": new_do_region,
                "do_spaces_bucket": new_do_bucket,
                "instagram_username": new_instagram_username,
                "instagram_password": new_instagram_password,
            }

            save_settings(new_settings)
            st.rerun()

    with col_clear:
        if st.button("üîÑ Wyczy≈õƒá cache", key="clear_cache", help="Czy≈õci cache po≈ÇƒÖcze≈Ñ (u≈ºyj po zmianie ustawie≈Ñ)"):
            # Wyczy≈õƒá cache Streamlit
            st.cache_data.clear()
            st.cache_resource.clear()
            st.success("‚úÖ Cache wyczyszczony!")
            st.rerun()

    with col_secrets:
        if st.button("üìã Generuj Secrets", key="generate_secrets", help="Generuje kod do wklejenia w Streamlit Cloud Secrets"):
            st.session_state["show_secrets_code"] = True
            st.rerun()

    # Sekcja generowania kodu secrets
    if st.session_state.get("show_secrets_code", False):
        st.divider()
        st.markdown("### üìã Kod do Streamlit Cloud Secrets")

        # Zbierz aktualne ustawienia (u≈ºywajƒÖc zmiennych z formularza)
        secrets_data = {
            "OPENAI_API_KEY": new_openai_key,
            "QDRANT_URL": new_qdrant_url,
            "QDRANT_API_KEY": new_qdrant_key,
            "POSTGRES_HOST": new_postgres_host,
            "POSTGRES_PORT": new_postgres_port,
            "POSTGRES_DB": new_postgres_db,
            "POSTGRES_USER": new_postgres_user,
            "POSTGRES_PASSWORD": new_postgres_password,
            "POSTGRES_SSLMODE": new_postgres_sslmode,
            "DO_SPACES_KEY": new_do_key,
            "DO_SPACES_SECRET": new_do_secret,
            "DO_SPACES_REGION": new_do_region,
            "DO_SPACES_BUCKET": new_do_bucket,
            "INSTAGRAM_USERNAME": new_instagram_username,
            "INSTAGRAM_PASSWORD": new_instagram_password,
        }

        # Generuj kod secrets (tylko wype≈Çnione pola)
        secrets_code = []
        for key, value in secrets_data.items():
            if value and value.strip():  # Tylko niepuste warto≈õci
                secrets_code.append(f'{key} = "{value}"')

        if secrets_code:
            secrets_text = "\n".join(secrets_code)

            st.success(
                "‚úÖ Wygenerowano kod secrets na podstawie wype≈Çnionych p√≥l:")
            st.code(secrets_text, language="toml")

            st.markdown("""
            **üìå Instrukcja:**
            1. Skopiuj powy≈ºszy kod
            2. Przejd≈∫ do swojej aplikacji na Streamlit Cloud
            3. Otw√≥rz **Settings ‚Üí Secrets**
            4. Wklej kod i zapisz zmiany
            5. Uruchom ponownie aplikacjƒô
            """)

            if st.button("‚ùå Zamknij", key="close_secrets_code"):
                st.session_state["show_secrets_code"] = False
                st.rerun()
        else:
            st.warning("‚ö†Ô∏è Nie ma wype≈Çnionych p√≥l do wygenerowania secrets.")
            if st.button("‚ùå Zamknij", key="close_secrets_code_empty"):
                st.session_state["show_secrets_code"] = False
                st.rerun()

    # Informacje o aktualnym stanie
    st.divider()
    st.markdown("### üìä Status po≈ÇƒÖcze≈Ñ")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown("**OpenAI**")
        if settings["openai_api_key"]:
            st.success("‚úÖ Klucz ustawiony")
        else:
            st.warning("‚ö†Ô∏è Brak klucza")

    with col2:
        st.markdown("**Qdrant**")
        if settings["qdrant_url"] and settings["qdrant_api_key"]:
            st.success("‚úÖ Konfiguracja OK")
        else:
            st.warning("‚ö†Ô∏è Niekompletna konfiguracja")

    with col3:
        st.markdown("**PostgreSQL**")
        if all([settings["postgres_host"], settings["postgres_db"], settings["postgres_user"], settings["postgres_password"]]):
            st.success("‚úÖ Konfiguracja OK")
        else:
            st.warning("‚ö†Ô∏è Niekompletna konfiguracja")

    with col4:
        st.markdown("**Instagram**")
        if settings["instagram_username"] and settings["instagram_password"]:
            st.success("‚úÖ Dane logowania OK")
        else:
            st.warning("‚ö†Ô∏è Brak danych logowania")

    # Ostrze≈ºenie o zmianach
    st.info("""
    **‚ÑπÔ∏è Uwaga:** 
    Zmiany w ustawieniach sƒÖ zapisywane tylko dla obecnej sesji. 
    Aby zapisaƒá je trwale:
    
    **Lokalnie:** Skonfiguruj zmienne ≈õrodowiskowe w pliku `.env`:
    ```
    INSTAGRAM_USERNAME=twoja_nazwa_uzytkownika
    INSTAGRAM_PASSWORD=twoje_haslo
    ```
    
    **Streamlit Cloud:** Dodaj do Secrets w aplikacji:
    ```
    instagram_username: twoja_nazwa_uzytkownika
    instagram_password: twoje_haslo
    ```
    """)
